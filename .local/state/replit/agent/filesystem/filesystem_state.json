{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Overview\n\nDTA Mind is a workflow automation platform that allows users to create visual workflows using a drag-and-drop interface. The application enables users to build automated processes by connecting different types of nodes (inputs, AI processing, data manipulation, and outputs) in a visual canvas. It's built as a full-stack web application with a React frontend and Express backend, designed for creating and executing AI-powered automation workflows.\n\n# User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n# System Architecture\n\n## Frontend Architecture\n- **Framework**: React with TypeScript using Vite as the build tool\n- **UI Library**: Shadcn/ui components built on Radix UI primitives for accessibility\n- **Styling**: Tailwind CSS with custom CSS variables for theming\n- **State Management**: TanStack Query for server state, React hooks for local state\n- **Routing**: Wouter for lightweight client-side routing\n- **Flow Builder**: ReactFlow for the visual workflow canvas and node connections\n\n## Backend Architecture\n- **Framework**: Express.js with TypeScript running on Node.js\n- **API Design**: RESTful API endpoints for workflows, executions, and templates\n- **Development Server**: Custom Vite integration for hot module replacement\n- **Request Handling**: JSON body parsing with request/response logging middleware\n- **Error Handling**: Centralized error middleware with status code mapping\n\n## Data Storage Solutions\n- **Database**: PostgreSQL configured through Drizzle ORM\n- **Schema Management**: Drizzle Kit for migrations and schema management\n- **Development Storage**: In-memory storage implementation for development/testing\n- **Connection**: Neon Database serverless PostgreSQL for production\n\n## Authentication and Authorization\n- **Session Management**: PostgreSQL-backed sessions using connect-pg-simple\n- **User System**: Simple username/password authentication with default demo user\n- **Authorization**: Basic user-scoped data access for workflows and executions\n\n## External Dependencies\n\n### AI Services\n- **OpenAI Integration**: GPT-4o model for chat completions and AI processing nodes\n- **API Configuration**: Environment variable-based API key management\n- **Service Layer**: Abstracted OpenAI service for chat completions and sentiment analysis\n\n### Development Tools\n- **Replit Integration**: Custom vite plugins for Replit development environment\n- **Build System**: ESBuild for server-side bundling, Vite for client bundling\n- **Type Checking**: TypeScript with strict mode enabled across client and server\n\n### UI Components\n- **Design System**: Comprehensive Shadcn/ui component library\n- **Icons**: Lucide React for consistent iconography\n- **Animations**: CSS-based animations with Tailwind utilities\n- **Form Handling**: React Hook Form with Zod validation\n\n### Workflow Engine\n- **Node Types**: Extensible system for input, AI, processing, and output nodes\n- **Execution Engine**: Sequential workflow execution with context passing\n- **Templates**: Pre-built workflow templates for common use cases\n- **Validation**: Zod schemas for runtime data validation","size_bytes":3137},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n        // FlowForge AI specific colors\n        node: {\n          input: \"var(--node-input-accent)\",\n          ai: \"var(--node-ai-accent)\",\n          processing: \"var(--node-processing-accent)\",\n          output: \"var(--node-output-accent)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\", \"Inter\", \"system-ui\", \"sans-serif\"],\n        serif: [\"var(--font-serif)\", \"Georgia\", \"serif\"],\n        mono: [\"var(--font-mono)\", \"Menlo\", \"monospace\"],\n        inter: [\"Inter\", \"sans-serif\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":3137},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/database.ts":{"content":"import { drizzle } from 'drizzle-orm/postgres-js';\nimport postgres from 'postgres';\nimport * as schema from '@shared/schema';\n\n// Supabase connection\nconst connectionString = process.env.DATABASE_URL || '';\n\nif (!connectionString) {\n  console.warn('⚠️  DATABASE_URL not provided. Using in-memory storage for development.');\n}\n\n// Create postgres connection\nexport const connection = postgres(connectionString, { \n  prepare: false,\n  ssl: connectionString.includes('supabase') ? { rejectUnauthorized: false } : false\n});\n\n// Create drizzle database instance\nexport const db = drizzle(connection, { schema });\n\n// Health check function\nexport async function checkDatabaseConnection() {\n  try {\n    if (!connectionString) {\n      return { status: 'no-connection', message: 'DATABASE_URL not configured' };\n    }\n    \n    await connection`SELECT 1`;\n    return { status: 'connected', message: 'Database connection successful' };\n  } catch (error) {\n    console.error('Database connection error:', error);\n    return { \n      status: 'error', \n      message: error instanceof Error ? error.message : 'Unknown database error' \n    };\n  }\n}","size_bytes":1137},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  // Initialize storage system\n  const { initializeStorage } = await import(\"./config/storage\");\n  await initializeStorage();\n  \n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2195},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { getStorage } from \"./config/storage\";\nimport { workflowEngine } from \"./services/workflow-engine\";\nimport { insertWorkflowSchema, insertWorkflowExecutionSchema } from \"@shared/schema\";\nimport { requireAuth, optionalAuth, type AuthRequest } from \"./middleware/auth\";\nimport { registerAuthRoutes } from \"./routes/auth\";\nimport { z } from \"zod\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Register authentication routes\n  registerAuthRoutes(app);\n  \n  // Workflow routes (with optional auth for user scoping)\n  app.get(\"/api/workflows\", optionalAuth, async (req, res) => {\n    try {\n      const storage = await getStorage();\n      const userId = req.user?.id;\n      const workflows = await storage.getWorkflows(userId);\n      res.json(workflows);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch workflows\" });\n    }\n  });\n\n  app.get(\"/api/workflows/:id\", optionalAuth, async (req, res) => {\n    try {\n      const storage = await getStorage();\n      const workflow = await storage.getWorkflow(req.params.id);\n      if (!workflow) {\n        return res.status(404).json({ error: \"Workflow not found\" });\n      }\n      // Optional: Add user access control here if needed\n      res.json(workflow);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch workflow\" });\n    }\n  });\n\n  app.post(\"/api/workflows\", optionalAuth, async (req, res) => {\n    try {\n      const storage = await getStorage();\n      const validatedData = insertWorkflowSchema.parse(req.body);\n      const userId = req.user?.id || 'default-user';\n      const workflow = await storage.createWorkflow({ ...validatedData, userId });\n      res.status(201).json(workflow);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ error: \"Invalid workflow data\", details: error.errors });\n      }\n      res.status(500).json({ error: \"Failed to create workflow\" });\n    }\n  });\n\n  app.put(\"/api/workflows/:id\", optionalAuth, async (req, res) => {\n    try {\n      const storage = await getStorage();\n      const validatedData = insertWorkflowSchema.partial().parse(req.body);\n      const workflow = await storage.updateWorkflow(req.params.id, validatedData);\n      if (!workflow) {\n        return res.status(404).json({ error: \"Workflow not found\" });\n      }\n      res.json(workflow);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ error: \"Invalid workflow data\", details: error.errors });\n      }\n      res.status(500).json({ error: \"Failed to update workflow\" });\n    }\n  });\n\n  app.delete(\"/api/workflows/:id\", optionalAuth, async (req, res) => {\n    try {\n      const storage = await getStorage();\n      const deleted = await storage.deleteWorkflow(req.params.id);\n      if (!deleted) {\n        return res.status(404).json({ error: \"Workflow not found\" });\n      }\n      res.status(204).send();\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to delete workflow\" });\n    }\n  });\n\n  // Workflow execution routes\n  app.post(\"/api/workflows/:id/execute\", optionalAuth, async (req, res) => {\n    try {\n      const storage = await getStorage();\n      const workflow = await storage.getWorkflow(req.params.id);\n      if (!workflow) {\n        return res.status(404).json({ error: \"Workflow not found\" });\n      }\n\n      const execution = await workflowEngine.executeWorkflow(\n        workflow.id,\n        workflow.nodes as any[],\n        workflow.edges as any[],\n        req.body\n      );\n\n      res.json(execution);\n    } catch (error) {\n      console.error(\"Workflow execution error:\", error);\n      res.status(500).json({ \n        error: \"Workflow execution failed\", \n        details: error instanceof Error ? error.message : \"Unknown error\" \n      });\n    }\n  });\n\n  app.get(\"/api/workflows/:id/executions\", optionalAuth, async (req, res) => {\n    try {\n      const storage = await getStorage();\n      const executions = await storage.getWorkflowExecutions(req.params.id);\n      res.json(executions);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch executions\" });\n    }\n  });\n\n  app.get(\"/api/executions/:id\", optionalAuth, async (req, res) => {\n    try {\n      const storage = await getStorage();\n      const execution = await storage.getWorkflowExecution(req.params.id);\n      if (!execution) {\n        return res.status(404).json({ error: \"Execution not found\" });\n      }\n      res.json(execution);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch execution\" });\n    }\n  });\n\n  // Template routes\n  app.get(\"/api/templates\", async (req, res) => {\n    try {\n      // Return predefined templates\n      const templates = [\n        {\n          id: \"customer-support\",\n          name: \"Customer Support Agent\",\n          description: \"AI agent that handles customer inquiries with sentiment analysis and escalation\",\n          category: \"customer-service\",\n          nodes: [\n            {\n              id: \"trigger-1\",\n              type: \"webhook\",\n              position: { x: 100, y: 100 },\n              data: { name: \"Customer Message\" }\n            },\n            {\n              id: \"openai-1\",\n              type: \"openai\",\n              position: { x: 400, y: 100 },\n              data: {\n                name: \"Analyze Message\",\n                systemPrompt: \"You are a customer support AI. Analyze the customer message and provide an appropriate response.\",\n                model: \"gpt-4o\",\n                temperature: 0.7\n              }\n            },\n            {\n              id: \"condition-1\",\n              type: \"condition\",\n              position: { x: 700, y: 100 },\n              data: {\n                name: \"Check Sentiment\",\n                condition: \"sentiment > 0.7\"\n              }\n            },\n            {\n              id: \"email-1\",\n              type: \"email\",\n              position: { x: 1000, y: 50 },\n              data: {\n                name: \"Send Alert\",\n                to: \"support@company.com\",\n                subject: \"Positive Customer Feedback\"\n              }\n            },\n            {\n              id: \"escalate-1\",\n              type: \"webhook-response\",\n              position: { x: 1000, y: 150 },\n              data: {\n                name: \"Escalate Issue\",\n                responseData: \"{ \\\"action\\\": \\\"escalate\\\", \\\"priority\\\": \\\"high\\\" }\"\n              }\n            }\n          ],\n          edges: [\n            { id: \"e1-2\", source: \"trigger-1\", target: \"openai-1\" },\n            { id: \"e2-3\", source: \"openai-1\", target: \"condition-1\" },\n            { id: \"e3-4\", source: \"condition-1\", target: \"email-1\" },\n            { id: \"e3-5\", source: \"condition-1\", target: \"escalate-1\" }\n          ]\n        },\n        {\n          id: \"content-generator\",\n          name: \"Content Generator\",\n          description: \"Generate blog posts, social media content, and marketing materials\",\n          category: \"content\",\n          nodes: [\n            {\n              id: \"manual-1\",\n              type: \"manual\",\n              position: { x: 100, y: 100 },\n              data: { name: \"Manual Trigger\" }\n            },\n            {\n              id: \"openai-1\",\n              type: \"openai\",\n              position: { x: 400, y: 100 },\n              data: {\n                name: \"Generate Content\",\n                systemPrompt: \"You are a content creation AI. Generate engaging content based on the provided topic.\",\n                model: \"gpt-4o\"\n              }\n            }\n          ],\n          edges: [\n            { id: \"e1-2\", source: \"manual-1\", target: \"openai-1\" }\n          ]\n        }\n      ];\n      res.json(templates);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch templates\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":7972},"server/storage.ts":{"content":"import { type User, type InsertUser, type Workflow, type InsertWorkflow, type WorkflowExecution, type InsertWorkflowExecution } from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\n\nexport interface IStorage {\n  // User methods\n  getUser(id: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  getUserByEmail?(email: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  verifyPassword?(email: string, password: string): Promise<User | null>;\n  \n  // Workflow methods\n  getWorkflows(userId?: string): Promise<Workflow[]>;\n  getWorkflow(id: string): Promise<Workflow | undefined>;\n  createWorkflow(workflow: InsertWorkflow & { userId?: string }): Promise<Workflow>;\n  updateWorkflow(id: string, updates: Partial<InsertWorkflow>): Promise<Workflow | undefined>;\n  deleteWorkflow(id: string): Promise<boolean>;\n  \n  // Workflow execution methods\n  getWorkflowExecutions(workflowId: string): Promise<WorkflowExecution[]>;\n  getWorkflowExecution(id: string): Promise<WorkflowExecution | undefined>;\n  createWorkflowExecution(execution: InsertWorkflowExecution): Promise<WorkflowExecution>;\n  updateWorkflowExecution(id: string, updates: Partial<WorkflowExecution>): Promise<WorkflowExecution | undefined>;\n}\n\nexport class MemStorage implements IStorage {\n  private users: Map<string, User>;\n  private workflows: Map<string, Workflow>;\n  private workflowExecutions: Map<string, WorkflowExecution>;\n\n  constructor() {\n    this.users = new Map();\n    this.workflows = new Map();\n    this.workflowExecutions = new Map();\n    \n    // Create default user\n    const defaultUser: User = {\n      id: \"default-user\",\n      username: \"demo\",\n      email: \"demo@example.com\",\n      password: \"demo123\",\n      createdAt: new Date(),\n      updatedAt: new Date()\n    };\n    this.users.set(defaultUser.id, defaultUser);\n  }\n\n  async getUser(id: string): Promise<User | undefined> {\n    return this.users.get(id);\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(\n      (user) => user.username === username,\n    );\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(\n      (user) => user.email === email,\n    );\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const id = randomUUID();\n    const now = new Date();\n    const user: User = { \n      ...insertUser, \n      id,\n      createdAt: now,\n      updatedAt: now\n    };\n    this.users.set(id, user);\n    return user;\n  }\n\n  async getWorkflows(userId?: string): Promise<Workflow[]> {\n    const workflows = Array.from(this.workflows.values());\n    return userId ? workflows.filter(w => w.userId === userId) : workflows;\n  }\n\n  async getWorkflow(id: string): Promise<Workflow | undefined> {\n    return this.workflows.get(id);\n  }\n\n  async createWorkflow(insertWorkflow: InsertWorkflow & { userId?: string }): Promise<Workflow> {\n    const id = randomUUID();\n    const now = new Date();\n    const workflow: Workflow = {\n      ...insertWorkflow,\n      id,\n      userId: insertWorkflow.userId || \"default-user\", // Default to demo user\n      description: insertWorkflow.description || null,\n      nodes: insertWorkflow.nodes || [],\n      edges: insertWorkflow.edges || [],\n      settings: insertWorkflow.settings || {},\n      isActive: insertWorkflow.isActive || false,\n      createdAt: now,\n      updatedAt: now,\n    };\n    this.workflows.set(id, workflow);\n    return workflow;\n  }\n\n  async updateWorkflow(id: string, updates: Partial<InsertWorkflow>): Promise<Workflow | undefined> {\n    const workflow = this.workflows.get(id);\n    if (!workflow) return undefined;\n\n    const updatedWorkflow: Workflow = {\n      ...workflow,\n      ...updates,\n      updatedAt: new Date(),\n    };\n    this.workflows.set(id, updatedWorkflow);\n    return updatedWorkflow;\n  }\n\n  async deleteWorkflow(id: string): Promise<boolean> {\n    return this.workflows.delete(id);\n  }\n\n  async getWorkflowExecutions(workflowId: string): Promise<WorkflowExecution[]> {\n    return Array.from(this.workflowExecutions.values())\n      .filter(execution => execution.workflowId === workflowId)\n      .sort((a, b) => new Date(b.executionTime).getTime() - new Date(a.executionTime).getTime());\n  }\n\n  async getWorkflowExecution(id: string): Promise<WorkflowExecution | undefined> {\n    return this.workflowExecutions.get(id);\n  }\n\n  async createWorkflowExecution(insertExecution: InsertWorkflowExecution): Promise<WorkflowExecution> {\n    const id = randomUUID();\n    const execution: WorkflowExecution = {\n      ...insertExecution,\n      id,\n      input: insertExecution.input || {},\n      output: null,\n      status: 'running',\n      error: null,\n      executionTime: new Date(),\n      completedAt: null,\n    };\n    this.workflowExecutions.set(id, execution);\n    return execution;\n  }\n\n  async updateWorkflowExecution(id: string, updates: Partial<WorkflowExecution>): Promise<WorkflowExecution | undefined> {\n    const execution = this.workflowExecutions.get(id);\n    if (!execution) return undefined;\n\n    const updatedExecution: WorkflowExecution = {\n      ...execution,\n      ...updates,\n    };\n    this.workflowExecutions.set(id, updatedExecution);\n    return updatedExecution;\n  }\n}\n\n// Default in-memory storage - can be replaced by database storage\nexport const storage = new MemStorage();\n","size_bytes":5445},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, jsonb, timestamp, boolean } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  username: text(\"username\").notNull().unique(),\n  email: text(\"email\").notNull().unique(),\n  password: text(\"password\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\nexport const workflows = pgTable(\"workflows\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  description: text(\"description\"),\n  userId: varchar(\"user_id\").references(() => users.id),\n  nodes: jsonb(\"nodes\").notNull().default('[]'),\n  edges: jsonb(\"edges\").notNull().default('[]'),\n  settings: jsonb(\"settings\").notNull().default('{}'),\n  isActive: boolean(\"is_active\").notNull().default(false),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\nexport const workflowExecutions = pgTable(\"workflow_executions\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  workflowId: varchar(\"workflow_id\").references(() => workflows.id).notNull(),\n  status: text(\"status\").notNull(), // 'running', 'completed', 'failed', 'cancelled'\n  input: jsonb(\"input\"),\n  output: jsonb(\"output\"),\n  error: text(\"error\"),\n  executionTime: timestamp(\"execution_time\").defaultNow().notNull(),\n  completedAt: timestamp(\"completed_at\"),\n});\n\nexport const insertUserSchema = createInsertSchema(users).pick({\n  username: true,\n  email: true,\n  password: true,\n});\n\nexport const loginUserSchema = z.object({\n  email: z.string().email('Invalid email format'),\n  password: z.string().min(6, 'Password must be at least 6 characters'),\n});\n\nexport const registerUserSchema = z.object({\n  username: z.string().min(2, 'Username must be at least 2 characters'),\n  email: z.string().email('Invalid email format'),\n  password: z.string().min(6, 'Password must be at least 6 characters'),\n});\n\nexport const insertWorkflowSchema = createInsertSchema(workflows).pick({\n  name: true,\n  description: true,\n  nodes: true,\n  edges: true,\n  settings: true,\n  isActive: true,\n});\n\nexport const insertWorkflowExecutionSchema = createInsertSchema(workflowExecutions).pick({\n  workflowId: true,\n  input: true,\n});\n\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type LoginUser = z.infer<typeof loginUserSchema>;\nexport type RegisterUser = z.infer<typeof registerUserSchema>;\nexport type User = typeof users.$inferSelect;\nexport type InsertWorkflow = z.infer<typeof insertWorkflowSchema>;\nexport type Workflow = typeof workflows.$inferSelect;\nexport type InsertWorkflowExecution = z.infer<typeof insertWorkflowExecutionSchema>;\nexport type WorkflowExecution = typeof workflowExecutions.$inferSelect;\n\n// Workflow node types\nexport const NodeTypeEnum = z.enum([\n  'webhook', 'manual', 'schedule',\n  'openai', 'agent', 'vector',\n  'code', 'condition', 'merge',\n  'email', 'webhook-response'\n]);\n\nexport type NodeType = z.infer<typeof NodeTypeEnum>;\n\n// Node data structure\nexport const NodeSchema = z.object({\n  id: z.string(),\n  type: NodeTypeEnum,\n  position: z.object({\n    x: z.number(),\n    y: z.number()\n  }),\n  data: z.record(z.any()),\n});\n\nexport const EdgeSchema = z.object({\n  id: z.string(),\n  source: z.string(),\n  target: z.string(),\n  sourceHandle: z.string().optional(),\n  targetHandle: z.string().optional(),\n});\n\nexport type WorkflowNode = z.infer<typeof NodeSchema>;\nexport type WorkflowEdge = z.infer<typeof EdgeSchema>;\n","size_bytes":3722},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { AuthProvider, useAuth } from \"./lib/auth\";\nimport { Navbar } from \"./components/layout/navbar\";\nimport WorkflowBuilder from \"@/pages/workflow-builder\";\nimport { AuthPage } from \"@/pages/auth\";\nimport NotFound from \"@/pages/not-found\";\nimport { Loader2 } from \"lucide-react\";\n\nfunction Router() {\n  const { user, isLoading } = useAuth();\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <Loader2 className=\"h-8 w-8 animate-spin\" />\n      </div>\n    );\n  }\n\n  if (!user) {\n    return <AuthPage />;\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Navbar />\n      <main>\n        <Switch>\n          <Route path=\"/\" component={WorkflowBuilder} />\n          <Route path=\"/workflow/:id?\" component={WorkflowBuilder} />\n          <Route component={NotFound} />\n        </Switch>\n      </main>\n    </div>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <AuthProvider>\n        <TooltipProvider>\n          <Toaster />\n          <Router />\n        </TooltipProvider>\n      </AuthProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":1427},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap');\n\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(0 0% 100%);\n  --foreground: hsl(220 14.3% 9.8%);\n  --card: hsl(0 0% 100%);\n  --card-foreground: hsl(220 14.3% 9.8%);\n  --popover: hsl(0 0% 100%);\n  --popover-foreground: hsl(220 14.3% 9.8%);\n  --primary: hsl(220.9 39.3% 11%);\n  --primary-foreground: hsl(210 20% 98%);\n  --secondary: hsl(220 14.3% 95.9%);\n  --secondary-foreground: hsl(220.9 39.3% 11%);\n  --muted: hsl(220 14.3% 95.9%);\n  --muted-foreground: hsl(220 8.9% 46.1%);\n  --accent: hsl(220 14.3% 95.9%);\n  --accent-foreground: hsl(220.9 39.3% 11%);\n  --destructive: hsl(0 84.2% 60.2%);\n  --destructive-foreground: hsl(210 20% 98%);\n  --border: hsl(220 13% 91%);\n  --input: hsl(220 13% 91%);\n  --ring: hsl(224 71.4% 4.1%);\n  --chart-1: hsl(12 76% 61%);\n  --chart-2: hsl(173 58% 39%);\n  --chart-3: hsl(197 37% 24%);\n  --chart-4: hsl(43 74% 66%);\n  --chart-5: hsl(27 87% 67%);\n  --radius: 0.75rem;\n  \n  /* FlowForge AI specific colors */\n  --primary-blue: hsl(220.9 39.3% 11%);\n  --secondary-green: hsl(142.1 76.2% 36.3%);\n  --accent-red: hsl(346.8 77.2% 49.8%);\n  \n  /* Node type colors */\n  --node-input-bg: hsl(214.3 31.8% 91.4%);\n  --node-input-border: hsl(213 27.8% 84.4%);\n  --node-input-accent: hsl(221.2 83.2% 53.3%);\n  \n  --node-ai-bg: hsl(47.9 95.8% 53.1%);\n  --node-ai-border: hsl(48 95.8% 76.1%);\n  --node-ai-accent: hsl(32.1 94.6% 43.7%);\n  \n  --node-processing-bg: hsl(151.8 81% 95.9%);\n  --node-processing-border: hsl(151.8 81% 85.9%);\n  --node-processing-accent: hsl(142.1 76.2% 36.3%);\n  \n  --node-output-bg: hsl(0 85.7% 97.3%);\n  --node-output-border: hsl(0 85.7% 89.2%);\n  --node-output-accent: hsl(346.8 77.2% 49.8%);\n  \n  --font-sans: 'Inter', sans-serif;\n}\n\n.dark {\n  --background: hsl(224 71.4% 4.1%);\n  --foreground: hsl(210 20% 98%);\n  --card: hsl(224 71.4% 4.1%);\n  --card-foreground: hsl(210 20% 98%);\n  --popover: hsl(224 71.4% 4.1%);\n  --popover-foreground: hsl(210 20% 98%);\n  --primary: hsl(210 20% 98%);\n  --primary-foreground: hsl(220.9 39.3% 11%);\n  --secondary: hsl(215 27.9% 16.9%);\n  --secondary-foreground: hsl(210 20% 98%);\n  --muted: hsl(215 27.9% 16.9%);\n  --muted-foreground: hsl(217.9 10.6% 64.9%);\n  --accent: hsl(215 27.9% 16.9%);\n  --accent-foreground: hsl(210 20% 98%);\n  --destructive: hsl(0 62.8% 30.6%);\n  --destructive-foreground: hsl(210 20% 98%);\n  --border: hsl(215 27.9% 16.9%);\n  --input: hsl(215 27.9% 16.9%);\n  --ring: hsl(216 12.2% 83.9%);\n  --chart-1: hsl(220 70% 50%);\n  --chart-2: hsl(160 60% 45%);\n  --chart-3: hsl(30 80% 55%);\n  --chart-4: hsl(280 65% 60%);\n  --chart-5: hsl(340 75% 55%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n  body {\n    @apply bg-background text-foreground font-sans antialiased;\n  }\n}\n\n@layer components {\n  .workflow-canvas {\n    background-image: radial-gradient(circle, hsl(220 13% 91%) 1px, transparent 1px);\n    background-size: 20px 20px;\n  }\n  \n  .node-connector {\n    position: absolute;\n    width: 12px;\n    height: 12px;\n    border-radius: 50%;\n    border: 2px solid white;\n  }\n  \n  .node-connector.input {\n    left: -6px;\n    top: 50%;\n    transform: translateY(-50%);\n  }\n  \n  .node-connector.output {\n    right: -6px;\n    top: 50%;\n    transform: translateY(-50%);\n  }\n  \n  .connection-line {\n    position: absolute;\n    height: 2px;\n    background: hsl(220 8.9% 46.1%);\n    transform-origin: left center;\n    z-index: 1;\n  }\n  \n  .sidebar-transition {\n    transition: width 0.3s ease-in-out;\n  }\n  \n  .node-dragging {\n    z-index: 1000;\n    transform: rotate(2deg);\n  }\n}\n\n/* React Flow specific styles */\n.react-flow__node-customNode {\n  background: transparent;\n  border: none;\n  padding: 0;\n}\n\n.react-flow__handle {\n  background: hsl(220 8.9% 46.1%);\n  border: 2px solid white;\n  width: 12px;\n  height: 12px;\n}\n\n.react-flow__handle-connecting {\n  background: hsl(221.2 83.2% 53.3%);\n}\n\n.react-flow__edge-path {\n  stroke: hsl(220 8.9% 46.1%);\n  stroke-width: 2;\n}\n\n.react-flow__edge.selected .react-flow__edge-path {\n  stroke: hsl(221.2 83.2% 53.3%);\n}\n\n.react-flow__controls {\n  box-shadow: 0 10px 15px -3px rgb(0 0 0 / 0.1), 0 4px 6px -4px rgb(0 0 0 / 0.1);\n}\n\n.react-flow__minimap {\n  background: hsl(0 0% 100%);\n  border: 1px solid hsl(220 13% 91%);\n}\n\n.react-flow__panel {\n  background: hsl(0 0% 100%);\n  border: 1px solid hsl(220 13% 91%);\n  border-radius: 0.5rem;\n}\n","size_bytes":4435},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"server/config/storage.ts":{"content":"import { checkDatabaseConnection } from '../database';\nimport { DatabaseStorage } from '../services/database-storage';\nimport { MemStorage } from '../storage';\nimport type { IStorage } from '../storage';\n\nlet storageInstance: IStorage | null = null;\n\nexport async function initializeStorage(): Promise<IStorage> {\n  if (storageInstance) {\n    return storageInstance;\n  }\n\n  // Check if database is available\n  const dbStatus = await checkDatabaseConnection();\n  \n  if (dbStatus.status === 'connected') {\n    console.log('✅ Database connected - Using PostgreSQL storage');\n    storageInstance = new DatabaseStorage();\n  } else {\n    console.log('⚠️  Database not available - Using in-memory storage');\n    console.log('   Configure DATABASE_URL to enable PostgreSQL storage');\n    storageInstance = new MemStorage();\n  }\n\n  return storageInstance;\n}\n\nexport async function getStorage(): Promise<IStorage> {\n  if (!storageInstance) {\n    return await initializeStorage();\n  }\n  return storageInstance;\n}","size_bytes":1007},"server/middleware/auth.ts":{"content":"import type { Request, Response, NextFunction } from 'express';\nimport jwt from 'jsonwebtoken';\nimport { type User } from '@shared/schema';\n\nconst JWT_SECRET = process.env.JWT_SECRET || 'your-secret-key-change-in-production';\nconst JWT_EXPIRES_IN = '7d';\n\ndeclare global {\n  namespace Express {\n    interface Request {\n      user?: User;\n    }\n  }\n}\n\nexport interface AuthRequest extends Request {\n  user: User;\n}\n\n// Generate JWT token\nexport function generateToken(user: User): string {\n  return jwt.sign(\n    { \n      id: user.id, \n      email: user.email, \n      username: user.username \n    },\n    JWT_SECRET,\n    { expiresIn: JWT_EXPIRES_IN }\n  );\n}\n\n// Verify JWT token\nexport function verifyToken(token: string): any {\n  try {\n    return jwt.verify(token, JWT_SECRET);\n  } catch (error) {\n    return null;\n  }\n}\n\n// Authentication middleware\nexport function requireAuth(req: Request, res: Response, next: NextFunction): void {\n  try {\n    const authHeader = req.headers.authorization;\n    const token = authHeader?.startsWith('Bearer ') ? authHeader.slice(7) : null;\n\n    if (!token) {\n      res.status(401).json({ error: 'No token provided' });\n      return;\n    }\n\n    const decoded = verifyToken(token);\n    if (!decoded) {\n      res.status(401).json({ error: 'Invalid or expired token' });\n      return;\n    }\n\n    // Add user info to request (we'll get full user from storage if needed)\n    req.user = decoded as User;\n    next();\n  } catch (error) {\n    res.status(401).json({ error: 'Authentication failed' });\n  }\n}\n\n// Optional authentication middleware (doesn't fail if no token)\nexport function optionalAuth(req: Request, res: Response, next: NextFunction): void {\n  try {\n    const authHeader = req.headers.authorization;\n    const token = authHeader?.startsWith('Bearer ') ? authHeader.slice(7) : null;\n\n    if (token) {\n      const decoded = verifyToken(token);\n      if (decoded) {\n        req.user = decoded as User;\n      }\n    }\n    next();\n  } catch (error) {\n    // Continue without authentication\n    next();\n  }\n}","size_bytes":2043},"server/routes/auth.ts":{"content":"import type { Express, Request, Response } from \"express\";\nimport { z } from \"zod\";\nimport { getStorage } from \"../config/storage\";\nimport { generateToken } from \"../middleware/auth\";\nimport { loginUserSchema, registerUserSchema, type LoginUser, type RegisterUser } from \"@shared/schema\";\n\nexport function registerAuthRoutes(app: Express): void {\n  // Register endpoint\n  app.post(\"/api/auth/register\", async (req: Request, res: Response) => {\n    try {\n      const storage = await getStorage();\n      const validatedData = registerUserSchema.parse(req.body);\n      \n      // Check if user already exists\n      const existingUser = await storage.getUserByEmail?.(validatedData.email);\n      if (existingUser) {\n        return res.status(400).json({ error: \"Email already registered\" });\n      }\n\n      const existingUsername = await storage.getUserByUsername(validatedData.username);\n      if (existingUsername) {\n        return res.status(400).json({ error: \"Username already taken\" });\n      }\n\n      // Create user\n      const user = await storage.createUser(validatedData);\n      \n      // Generate token\n      const token = generateToken(user);\n      \n      res.status(201).json({\n        message: \"User registered successfully\",\n        token,\n        user: {\n          id: user.id,\n          username: user.username,\n          email: user.email,\n        }\n      });\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ error: \"Invalid input\", details: error.errors });\n      }\n      console.error(\"Registration error:\", error);\n      res.status(500).json({ error: \"Registration failed\" });\n    }\n  });\n\n  // Login endpoint\n  app.post(\"/api/auth/login\", async (req: Request, res: Response) => {\n    try {\n      const storage = await getStorage();\n      const validatedData = loginUserSchema.parse(req.body);\n      \n      // For database storage, use verifyPassword method\n      if ('verifyPassword' in storage) {\n        const user = await storage.verifyPassword(validatedData.email, validatedData.password);\n        if (!user) {\n          return res.status(401).json({ error: \"Invalid email or password\" });\n        }\n\n        const token = generateToken(user);\n        \n        return res.json({\n          message: \"Login successful\",\n          token,\n          user: {\n            id: user.id,\n            username: user.username,\n            email: user.email,\n          }\n        });\n      } else {\n        // For in-memory storage, simple check (demo mode)\n        const user = await storage.getUserByUsername('demo');\n        if (user && validatedData.email === 'demo@example.com' && validatedData.password === 'demo123') {\n          const token = generateToken(user);\n          \n          return res.json({\n            message: \"Login successful (demo mode)\",\n            token,\n            user: {\n              id: user.id,\n              username: user.username,\n              email: user.email,\n            }\n          });\n        }\n        \n        return res.status(401).json({ error: \"Invalid email or password\" });\n      }\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ error: \"Invalid input\", details: error.errors });\n      }\n      console.error(\"Login error:\", error);\n      res.status(500).json({ error: \"Login failed\" });\n    }\n  });\n\n  // Get current user endpoint\n  app.get(\"/api/auth/me\", async (req: Request, res: Response) => {\n    try {\n      const authHeader = req.headers.authorization;\n      const token = authHeader?.startsWith('Bearer ') ? authHeader.slice(7) : null;\n\n      if (!token) {\n        return res.status(401).json({ error: \"No token provided\" });\n      }\n\n      // For demo purposes, return demo user info if no database\n      if (!('verifyPassword' in storage)) {\n        return res.json({\n          user: {\n            id: \"default-user\",\n            username: \"demo\",\n            email: \"demo@example.com\",\n          }\n        });\n      }\n\n      // TODO: Implement proper token verification and user lookup\n      res.status(401).json({ error: \"Authentication required\" });\n    } catch (error) {\n      console.error(\"Me endpoint error:\", error);\n      res.status(500).json({ error: \"Failed to get user info\" });\n    }\n  });\n\n  // Logout endpoint (client-side token removal)\n  app.post(\"/api/auth/logout\", (req: Request, res: Response) => {\n    res.json({ message: \"Logout successful\" });\n  });\n\n  // Check database connection status\n  app.get(\"/api/auth/status\", async (req: Request, res: Response) => {\n    try {\n      const storage = await getStorage();\n      const hasDatabase = 'verifyPassword' in storage;\n      const connectionString = process.env.DATABASE_URL;\n      \n      res.json({\n        hasDatabase,\n        databaseConfigured: !!connectionString,\n        storageType: hasDatabase ? 'database' : 'in-memory',\n        message: hasDatabase \n          ? 'Database authentication enabled' \n          : 'Using demo authentication (in-memory storage)'\n      });\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to get auth status\" });\n    }\n  });\n}","size_bytes":5124},"server/services/database-storage.ts":{"content":"import { eq, desc } from 'drizzle-orm';\nimport bcrypt from 'bcryptjs';\nimport { db } from '../database';\nimport { users, workflows, workflowExecutions } from '@shared/schema';\nimport { \n  type User, \n  type InsertUser, \n  type Workflow, \n  type InsertWorkflow, \n  type WorkflowExecution, \n  type InsertWorkflowExecution \n} from '@shared/schema';\nimport type { IStorage } from '../storage';\n\nexport class DatabaseStorage implements IStorage {\n  // User methods\n  async getUser(id: string): Promise<User | undefined> {\n    try {\n      const result = await db.select().from(users).where(eq(users.id, id)).limit(1);\n      return result[0];\n    } catch (error) {\n      console.error('Error getting user:', error);\n      return undefined;\n    }\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    try {\n      const result = await db.select().from(users).where(eq(users.username, username)).limit(1);\n      return result[0];\n    } catch (error) {\n      console.error('Error getting user by username:', error);\n      return undefined;\n    }\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    try {\n      const result = await db.select().from(users).where(eq(users.email, email)).limit(1);\n      return result[0];\n    } catch (error) {\n      console.error('Error getting user by email:', error);\n      return undefined;\n    }\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    try {\n      // Hash password\n      const hashedPassword = await bcrypt.hash(insertUser.password, 12);\n      \n      const result = await db.insert(users).values({\n        ...insertUser,\n        password: hashedPassword,\n      }).returning();\n      \n      return result[0];\n    } catch (error) {\n      console.error('Error creating user:', error);\n      throw new Error('Failed to create user');\n    }\n  }\n\n  async verifyPassword(email: string, password: string): Promise<User | null> {\n    try {\n      const user = await this.getUserByEmail(email);\n      if (!user) return null;\n      \n      const isValid = await bcrypt.compare(password, user.password);\n      return isValid ? user : null;\n    } catch (error) {\n      console.error('Error verifying password:', error);\n      return null;\n    }\n  }\n\n  // Workflow methods\n  async getWorkflows(userId?: string): Promise<Workflow[]> {\n    try {\n      const query = db.select().from(workflows).orderBy(desc(workflows.updatedAt));\n      \n      if (userId) {\n        const result = await query.where(eq(workflows.userId, userId));\n        return result;\n      }\n      \n      return await query;\n    } catch (error) {\n      console.error('Error getting workflows:', error);\n      return [];\n    }\n  }\n\n  async getWorkflow(id: string): Promise<Workflow | undefined> {\n    try {\n      const result = await db.select().from(workflows).where(eq(workflows.id, id)).limit(1);\n      return result[0];\n    } catch (error) {\n      console.error('Error getting workflow:', error);\n      return undefined;\n    }\n  }\n\n  async createWorkflow(insertWorkflow: InsertWorkflow & { userId: string }): Promise<Workflow> {\n    try {\n      const result = await db.insert(workflows).values(insertWorkflow).returning();\n      return result[0];\n    } catch (error) {\n      console.error('Error creating workflow:', error);\n      throw new Error('Failed to create workflow');\n    }\n  }\n\n  async updateWorkflow(id: string, updates: Partial<InsertWorkflow>): Promise<Workflow | undefined> {\n    try {\n      const result = await db\n        .update(workflows)\n        .set({ ...updates, updatedAt: new Date() })\n        .where(eq(workflows.id, id))\n        .returning();\n      \n      return result[0];\n    } catch (error) {\n      console.error('Error updating workflow:', error);\n      return undefined;\n    }\n  }\n\n  async deleteWorkflow(id: string): Promise<boolean> {\n    try {\n      await db.delete(workflows).where(eq(workflows.id, id));\n      return true;\n    } catch (error) {\n      console.error('Error deleting workflow:', error);\n      return false;\n    }\n  }\n\n  // Workflow execution methods\n  async getWorkflowExecutions(workflowId: string): Promise<WorkflowExecution[]> {\n    try {\n      const result = await db\n        .select()\n        .from(workflowExecutions)\n        .where(eq(workflowExecutions.workflowId, workflowId))\n        .orderBy(desc(workflowExecutions.executionTime));\n      \n      return result;\n    } catch (error) {\n      console.error('Error getting workflow executions:', error);\n      return [];\n    }\n  }\n\n  async getWorkflowExecution(id: string): Promise<WorkflowExecution | undefined> {\n    try {\n      const result = await db\n        .select()\n        .from(workflowExecutions)\n        .where(eq(workflowExecutions.id, id))\n        .limit(1);\n      \n      return result[0];\n    } catch (error) {\n      console.error('Error getting workflow execution:', error);\n      return undefined;\n    }\n  }\n\n  async createWorkflowExecution(insertExecution: InsertWorkflowExecution): Promise<WorkflowExecution> {\n    try {\n      const result = await db\n        .insert(workflowExecutions)\n        .values({\n          ...insertExecution,\n          status: 'running',\n          error: null,\n          output: null,\n          completedAt: null,\n        })\n        .returning();\n      \n      return result[0];\n    } catch (error) {\n      console.error('Error creating workflow execution:', error);\n      throw new Error('Failed to create workflow execution');\n    }\n  }\n\n  async updateWorkflowExecution(\n    id: string, \n    updates: Partial<WorkflowExecution>\n  ): Promise<WorkflowExecution | undefined> {\n    try {\n      const result = await db\n        .update(workflowExecutions)\n        .set(updates)\n        .where(eq(workflowExecutions.id, id))\n        .returning();\n      \n      return result[0];\n    } catch (error) {\n      console.error('Error updating workflow execution:', error);\n      return undefined;\n    }\n  }\n}","size_bytes":5902},"server/services/openai-service.ts":{"content":"import OpenAI from \"openai\";\n\n// the newest OpenAI model is \"gpt-4o\" which was released May 13, 2024. do not change this unless explicitly requested by the user\nconst openai = new OpenAI({\n  apiKey: process.env.OPENAI_API_KEY || process.env.OPENAI_API_KEY_ENV_VAR || \"your_openai_api_key\"\n});\n\nexport interface ChatMessage {\n  role: 'system' | 'user' | 'assistant';\n  content: string;\n}\n\nexport interface ChatCompletionOptions {\n  model?: string;\n  temperature?: number;\n  maxTokens?: number;\n  systemPrompt?: string;\n  messages: ChatMessage[];\n}\n\nexport class OpenAIService {\n  async chat(options: ChatCompletionOptions): Promise<string> {\n    try {\n      const messages: ChatMessage[] = [];\n      \n      if (options.systemPrompt) {\n        messages.push({\n          role: 'system',\n          content: options.systemPrompt\n        });\n      }\n      \n      messages.push(...options.messages);\n\n      const response = await openai.chat.completions.create({\n        model: options.model || \"gpt-4o\",\n        messages,\n        temperature: options.temperature || 0.7,\n        max_tokens: options.maxTokens || 150,\n      });\n\n      return response.choices[0].message.content || \"\";\n    } catch (error) {\n      console.error(\"OpenAI API error:\", error);\n      throw new Error(\"Failed to process chat completion\");\n    }\n  }\n\n  async analyzeSentiment(text: string): Promise<{ sentiment: string; score: number; confidence: number }> {\n    try {\n      const response = await openai.chat.completions.create({\n        model: \"gpt-4o\",\n        messages: [\n          {\n            role: \"system\",\n            content: \"You are a sentiment analysis expert. Analyze the sentiment of the text and provide sentiment (positive/negative/neutral), score (-1 to 1), and confidence (0 to 1). Respond with JSON in this format: { 'sentiment': string, 'score': number, 'confidence': number }\"\n          },\n          {\n            role: \"user\",\n            content: text\n          }\n        ],\n        response_format: { type: \"json_object\" },\n      });\n\n      const result = JSON.parse(response.choices[0].message.content || \"{}\");\n      \n      return {\n        sentiment: result.sentiment || \"neutral\",\n        score: Math.max(-1, Math.min(1, result.score || 0)),\n        confidence: Math.max(0, Math.min(1, result.confidence || 0))\n      };\n    } catch (error) {\n      console.error(\"Sentiment analysis error:\", error);\n      throw new Error(\"Failed to analyze sentiment\");\n    }\n  }\n\n  async generateResponse(prompt: string, context?: any): Promise<string> {\n    try {\n      const systemPrompt = `You are a helpful AI assistant. ${context ? `Context: ${JSON.stringify(context)}` : ''}`;\n      \n      const response = await openai.chat.completions.create({\n        model: \"gpt-4o\",\n        messages: [\n          { role: \"system\", content: systemPrompt },\n          { role: \"user\", content: prompt }\n        ],\n        temperature: 0.7,\n        max_tokens: 500,\n      });\n\n      return response.choices[0].message.content || \"\";\n    } catch (error) {\n      console.error(\"Response generation error:\", error);\n      throw new Error(\"Failed to generate response\");\n    }\n  }\n}\n\nexport const openaiService = new OpenAIService();\n","size_bytes":3203},"server/services/workflow-engine.ts":{"content":"import { type WorkflowNode, type WorkflowEdge, type WorkflowExecution } from \"@shared/schema\";\nimport { openaiService } from \"./openai-service\";\nimport { llmService } from \"./llm-service\";\nimport { getStorage } from \"../config/storage\";\n\nexport interface NodeExecutionResult {\n  success: boolean;\n  data?: any;\n  error?: string;\n}\n\nexport interface WorkflowContext {\n  executionId: string;\n  variables: Record<string, any>;\n  previousResults: Record<string, any>;\n}\n\nexport class WorkflowEngine {\n  async executeWorkflow(\n    workflowId: string,\n    nodes: WorkflowNode[],\n    edges: WorkflowEdge[],\n    input?: any\n  ): Promise<WorkflowExecution> {\n    // Create execution record\n    const execution = await storage.createWorkflowExecution({\n      workflowId,\n      input: input || {},\n    });\n\n    try {\n      const context: WorkflowContext = {\n        executionId: execution.id,\n        variables: input || {},\n        previousResults: {},\n      };\n\n      // Find start node (no incoming edges)\n      const startNodes = nodes.filter(node => \n        !edges.some(edge => edge.target === node.id)\n      );\n\n      if (startNodes.length === 0) {\n        throw new Error(\"No start node found in workflow\");\n      }\n\n      // Execute workflow starting from start node\n      const result = await this.executeFromNode(startNodes[0], nodes, edges, context);\n\n      // Update execution with results\n      await storage.updateWorkflowExecution(execution.id, {\n        status: 'completed',\n        output: result.data,\n        completedAt: new Date(),\n      });\n\n      return await storage.getWorkflowExecution(execution.id) || execution;\n    } catch (error) {\n      // Update execution with error\n      await storage.updateWorkflowExecution(execution.id, {\n        status: 'failed',\n        error: error instanceof Error ? error.message : 'Unknown error',\n        completedAt: new Date(),\n      });\n\n      throw error;\n    }\n  }\n\n  private async executeFromNode(\n    node: WorkflowNode,\n    allNodes: WorkflowNode[],\n    edges: WorkflowEdge[],\n    context: WorkflowContext\n  ): Promise<NodeExecutionResult> {\n    console.log(`Executing node: ${node.id} (${node.type})`);\n\n    try {\n      // Execute the current node\n      const result = await this.executeNode(node, context);\n      \n      if (!result.success) {\n        return result;\n      }\n\n      // Store result in context\n      context.previousResults[node.id] = result.data;\n\n      // Find next nodes\n      const nextEdges = edges.filter(edge => edge.source === node.id);\n      \n      if (nextEdges.length === 0) {\n        // End of workflow\n        return result;\n      }\n\n      // Execute next nodes\n      for (const edge of nextEdges) {\n        const nextNode = allNodes.find(n => n.id === edge.target);\n        if (nextNode) {\n          const nextResult = await this.executeFromNode(nextNode, allNodes, edges, context);\n          if (!nextResult.success) {\n            return nextResult;\n          }\n        }\n      }\n\n      return result;\n    } catch (error) {\n      return {\n        success: false,\n        error: error instanceof Error ? error.message : 'Unknown error',\n      };\n    }\n  }\n\n  private async executeNode(node: WorkflowNode, context: WorkflowContext): Promise<NodeExecutionResult> {\n    switch (node.type) {\n      case 'manual':\n        return this.executeManualTrigger(node, context);\n      \n      case 'webhook':\n        return this.executeWebhook(node, context);\n      \n      case 'schedule':\n        return this.executeSchedule(node, context);\n      \n      case 'openai':\n        return this.executeOpenAI(node, context);\n      \n      case 'agent':\n        return this.executeAgent(node, context);\n      \n      case 'vector':\n        return this.executeVectorSearch(node, context);\n      \n      case 'code':\n        return this.executeCode(node, context);\n      \n      case 'condition':\n        return this.executeCondition(node, context);\n      \n      case 'merge':\n        return this.executeMerge(node, context);\n      \n      case 'email':\n        return this.executeEmail(node, context);\n      \n      case 'webhook-response':\n        return this.executeWebhookResponse(node, context);\n      \n      default:\n        return {\n          success: false,\n          error: `Unknown node type: ${node.type}`,\n        };\n    }\n  }\n\n  private async executeManualTrigger(node: WorkflowNode, context: WorkflowContext): Promise<NodeExecutionResult> {\n    return {\n      success: true,\n      data: context.variables,\n    };\n  }\n\n  private async executeWebhook(node: WorkflowNode, context: WorkflowContext): Promise<NodeExecutionResult> {\n    return {\n      success: true,\n      data: context.variables,\n    };\n  }\n\n  private async executeSchedule(node: WorkflowNode, context: WorkflowContext): Promise<NodeExecutionResult> {\n    return {\n      success: true,\n      data: { timestamp: new Date().toISOString() },\n    };\n  }\n\n  private async executeOpenAI(node: WorkflowNode, context: WorkflowContext): Promise<NodeExecutionResult> {\n    try {\n      const { systemPrompt, model, temperature, maxTokens, userMessage } = node.data;\n      \n      const messages = [];\n      if (userMessage) {\n        messages.push({\n          role: 'user' as const,\n          content: this.interpolateTemplate(userMessage, context),\n        });\n      }\n\n      const response = await openaiService.chat({\n        model: model || \"gpt-4o\",\n        temperature: temperature || 0.7,\n        maxTokens: maxTokens || 150,\n        systemPrompt: this.interpolateTemplate(systemPrompt || \"\", context),\n        messages,\n      });\n\n      return {\n        success: true,\n        data: { response, rawOutput: response },\n      };\n    } catch (error) {\n      return {\n        success: false,\n        error: error instanceof Error ? error.message : 'OpenAI execution failed',\n      };\n    }\n  }\n\n  private async executeAgent(node: WorkflowNode, context: WorkflowContext): Promise<NodeExecutionResult> {\n    try {\n      const { prompt, provider = 'openai', model = 'gpt-4o', temperature = 0.7, maxTokens = 500 } = node.data;\n      const interpolatedPrompt = this.interpolateTemplate(prompt || \"\", context);\n      \n      const response = await llmService.generateResponse(\n        provider,\n        model,\n        interpolatedPrompt,\n        context.previousResults\n      );\n\n      return {\n        success: true,\n        data: { response, context: context.previousResults, provider, model },\n      };\n    } catch (error) {\n      return {\n        success: false,\n        error: error instanceof Error ? error.message : 'Agent execution failed',\n      };\n    }\n  }\n\n  private async executeVectorSearch(node: WorkflowNode, context: WorkflowContext): Promise<NodeExecutionResult> {\n    // Placeholder for vector search implementation\n    return {\n      success: true,\n      data: { results: [], query: node.data.query },\n    };\n  }\n\n  private async executeCode(node: WorkflowNode, context: WorkflowContext): Promise<NodeExecutionResult> {\n    try {\n      const { code, language } = node.data;\n      \n      if (language === 'javascript') {\n        // Simple JavaScript execution (be careful with security in production)\n        const func = new Function('context', 'previousResults', code);\n        const result = func(context.variables, context.previousResults);\n        \n        return {\n          success: true,\n          data: result,\n        };\n      }\n      \n      return {\n        success: false,\n        error: `Unsupported language: ${language}`,\n      };\n    } catch (error) {\n      return {\n        success: false,\n        error: error instanceof Error ? error.message : 'Code execution failed',\n      };\n    }\n  }\n\n  private async executeCondition(node: WorkflowNode, context: WorkflowContext): Promise<NodeExecutionResult> {\n    try {\n      const { condition } = node.data;\n      \n      // Simple condition evaluation\n      const func = new Function('context', 'previousResults', `return ${condition}`);\n      const result = func(context.variables, context.previousResults);\n      \n      return {\n        success: true,\n        data: { condition: result, originalCondition: condition },\n      };\n    } catch (error) {\n      return {\n        success: false,\n        error: error instanceof Error ? error.message : 'Condition evaluation failed',\n      };\n    }\n  }\n\n  private async executeMerge(node: WorkflowNode, context: WorkflowContext): Promise<NodeExecutionResult> {\n    return {\n      success: true,\n      data: { merged: context.previousResults },\n    };\n  }\n\n  private async executeEmail(node: WorkflowNode, context: WorkflowContext): Promise<NodeExecutionResult> {\n    const { to, subject, body } = node.data;\n    \n    // Simulate email sending\n    console.log('Sending email:', {\n      to: this.interpolateTemplate(to || \"\", context),\n      subject: this.interpolateTemplate(subject || \"\", context),\n      body: this.interpolateTemplate(body || \"\", context),\n    });\n\n    return {\n      success: true,\n      data: { sent: true, to, subject },\n    };\n  }\n\n  private async executeWebhookResponse(node: WorkflowNode, context: WorkflowContext): Promise<NodeExecutionResult> {\n    const { responseData } = node.data;\n    \n    return {\n      success: true,\n      data: this.interpolateTemplate(responseData || \"{}\", context),\n    };\n  }\n\n  private interpolateTemplate(template: string, context: WorkflowContext): string {\n    if (!template) return \"\";\n    \n    return template.replace(/\\{\\{(\\w+)\\}\\}/g, (match, key) => {\n      return context.variables[key] || context.previousResults[key] || match;\n    });\n  }\n}\n\nexport const workflowEngine = new WorkflowEngine();\n","size_bytes":9604},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/auth.tsx":{"content":"import { createContext, useContext, useState, useEffect, type ReactNode } from 'react';\nimport { apiRequest } from './queryClient';\n\ninterface User {\n  id: string;\n  username: string;\n  email: string;\n}\n\ninterface AuthContextType {\n  user: User | null;\n  isLoading: boolean;\n  login: (email: string, password: string) => Promise<void>;\n  register: (username: string, email: string, password: string) => Promise<void>;\n  logout: () => void;\n  token: string | null;\n}\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\nexport function AuthProvider({ children }: { children: ReactNode }) {\n  const [user, setUser] = useState<User | null>(null);\n  const [token, setToken] = useState<string | null>(null);\n  const [isLoading, setIsLoading] = useState(true);\n\n  // Initialize auth state on mount\n  useEffect(() => {\n    const storedToken = localStorage.getItem('auth_token');\n    const storedUser = localStorage.getItem('auth_user');\n    \n    if (storedToken && storedUser) {\n      try {\n        setToken(storedToken);\n        setUser(JSON.parse(storedUser));\n      } catch (error) {\n        localStorage.removeItem('auth_token');\n        localStorage.removeItem('auth_user');\n      }\n    }\n    \n    setIsLoading(false);\n  }, []);\n\n  const login = async (email: string, password: string) => {\n    try {\n      const response = await apiRequest('POST', '/api/auth/login', { email, password });\n      \n      const data = await response.json();\n      \n      if (!response.ok) {\n        throw new Error(data.error || 'Login failed');\n      }\n      \n      setToken(data.token);\n      setUser(data.user);\n      \n      localStorage.setItem('auth_token', data.token);\n      localStorage.setItem('auth_user', JSON.stringify(data.user));\n    } catch (error) {\n      throw error;\n    }\n  };\n\n  const register = async (username: string, email: string, password: string) => {\n    try {\n      const response = await apiRequest('POST', '/api/auth/register', { username, email, password });\n      \n      const data = await response.json();\n      \n      if (!response.ok) {\n        throw new Error(data.error || 'Registration failed');\n      }\n      \n      setToken(data.token);\n      setUser(data.user);\n      \n      localStorage.setItem('auth_token', data.token);\n      localStorage.setItem('auth_user', JSON.stringify(data.user));\n    } catch (error) {\n      throw error;\n    }\n  };\n\n  const logout = () => {\n    setToken(null);\n    setUser(null);\n    localStorage.removeItem('auth_token');\n    localStorage.removeItem('auth_user');\n  };\n\n  return (\n    <AuthContext.Provider value={{\n      user,\n      isLoading,\n      login,\n      register,\n      logout,\n      token\n    }}>\n      {children}\n    </AuthContext.Provider>\n  );\n}\n\nexport function useAuth() {\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n}","size_bytes":2928},"client/src/lib/node-types.ts":{"content":"export const NODE_TYPES = {\n  // Input Nodes\n  webhook: {\n    label: 'Webhook',\n    description: 'Trigger workflows via HTTP requests',\n    category: 'inputs',\n    color: 'blue',\n    defaultData: {\n      method: 'POST',\n      path: '/webhook',\n      authentication: 'none'\n    }\n  },\n  manual: {\n    label: 'Manual Trigger',\n    description: 'Start workflows manually',\n    category: 'inputs',\n    color: 'blue',\n    defaultData: {}\n  },\n  schedule: {\n    label: 'Schedule',\n    description: 'Run workflows on a schedule',\n    category: 'inputs',\n    color: 'blue',\n    defaultData: {\n      cron: '0 9 * * *',\n      timezone: 'UTC'\n    }\n  },\n\n  // AI Nodes\n  openai: {\n    label: 'OpenAI Chat',\n    description: 'GPT-powered conversational AI',\n    category: 'ai',\n    color: 'amber',\n    defaultData: {\n      model: 'gpt-4o',\n      temperature: 0.7,\n      maxTokens: 150,\n      systemPrompt: 'You are a helpful AI assistant.',\n      userMessage: '{{input}}'\n    }\n  },\n  agent: {\n    label: 'AI Agent',\n    description: 'Multi-provider AI agent with configurable LLM',\n    category: 'ai',\n    color: 'amber',\n    defaultData: {\n      provider: 'openai',\n      model: 'gpt-4o',\n      temperature: 0.7,\n      maxTokens: 500,\n      tools: ['search', 'calculator'],\n      memory: true,\n      prompt: 'You are an AI agent with access to tools.'\n    }\n  },\n  vector: {\n    label: 'Vector Search',\n    description: 'Semantic search and retrieval',\n    category: 'ai',\n    color: 'amber',\n    defaultData: {\n      collection: 'default',\n      topK: 5,\n      threshold: 0.7\n    }\n  },\n\n  // Processing Nodes\n  code: {\n    label: 'Code',\n    description: 'Execute JavaScript/Python code',\n    category: 'processing',\n    color: 'emerald',\n    defaultData: {\n      language: 'javascript',\n      code: '// Your code here\\nreturn { result: \"Hello World\" };'\n    }\n  },\n  condition: {\n    label: 'Condition',\n    description: 'Branch workflow based on conditions',\n    category: 'processing',\n    color: 'emerald',\n    defaultData: {\n      condition: 'input.value > 0'\n    }\n  },\n  merge: {\n    label: 'Merge',\n    description: 'Combine multiple data streams',\n    category: 'processing',\n    color: 'emerald',\n    defaultData: {\n      strategy: 'merge',\n      waitForAll: true\n    }\n  },\n\n  // Output Nodes\n  email: {\n    label: 'Send Email',\n    description: 'Send emails via SMTP',\n    category: 'outputs',\n    color: 'red',\n    defaultData: {\n      to: '',\n      subject: 'Workflow Notification',\n      body: 'Your workflow has completed successfully.',\n      smtp: {\n        host: 'smtp.gmail.com',\n        port: 587,\n        secure: false\n      }\n    }\n  },\n  'webhook-response': {\n    label: 'Webhook Response',\n    description: 'Return data to webhook caller',\n    category: 'outputs',\n    color: 'red',\n    defaultData: {\n      statusCode: 200,\n      responseData: '{\"status\": \"success\"}'\n    }\n  }\n} as const;\n\nexport type NodeTypeKey = keyof typeof NODE_TYPES;\n","size_bytes":2960},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const token = localStorage.getItem('auth_token');\n  const headers: Record<string, string> = data ? { \"Content-Type\": \"application/json\" } : {};\n  \n  if (token) {\n    headers.Authorization = `Bearer ${token}`;\n  }\n  \n  const res = await fetch(url, {\n    method,\n    headers,\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const token = localStorage.getItem('auth_token');\n    const headers: Record<string, string> = {};\n    \n    if (token) {\n      headers.Authorization = `Bearer ${token}`;\n    }\n    \n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n      headers,\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1748},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/lib/workflow-templates.ts":{"content":"export const WORKFLOW_TEMPLATES = {\n  'customer-support': {\n    id: 'customer-support',\n    name: 'Customer Support Agent',\n    description: 'AI agent that handles customer inquiries with sentiment analysis and escalation',\n    category: 'customer-service',\n    nodes: [\n      {\n        id: 'trigger-1',\n        type: 'customNode',\n        position: { x: 100, y: 100 },\n        data: {\n          nodeType: 'webhook',\n          label: 'Customer Message',\n          description: 'Incoming customer support request',\n          category: 'inputs'\n        }\n      },\n      {\n        id: 'openai-1',\n        type: 'customNode',\n        position: { x: 400, y: 100 },\n        data: {\n          nodeType: 'openai',\n          label: 'Analyze Message',\n          description: 'Analyze customer sentiment and generate response',\n          category: 'ai',\n          model: 'gpt-4o',\n          temperature: 0.7,\n          systemPrompt: 'You are a customer support AI. Analyze the customer message sentiment and provide an appropriate response. Return a JSON object with sentiment score (0-1) and response.',\n          userMessage: 'Customer message: {{input.message}}'\n        }\n      },\n      {\n        id: 'condition-1',\n        type: 'customNode',\n        position: { x: 700, y: 100 },\n        data: {\n          nodeType: 'condition',\n          label: 'Check Sentiment',\n          description: 'Route based on customer sentiment',\n          category: 'processing',\n          condition: 'previousResults.sentiment > 0.7'\n        }\n      },\n      {\n        id: 'email-1',\n        type: 'customNode',\n        position: { x: 1000, y: 50 },\n        data: {\n          nodeType: 'email',\n          label: 'Positive Feedback Alert',\n          description: 'Notify team of positive feedback',\n          category: 'outputs',\n          to: 'support@company.com',\n          subject: 'Positive Customer Feedback Received',\n          body: 'We received positive feedback: {{previousResults.response}}'\n        }\n      },\n      {\n        id: 'escalate-1',\n        type: 'customNode',\n        position: { x: 1000, y: 150 },\n        data: {\n          nodeType: 'webhook-response',\n          label: 'Escalate Issue',\n          description: 'Create high priority support ticket',\n          category: 'outputs',\n          statusCode: 200,\n          responseData: '{\"action\": \"escalate\", \"priority\": \"high\", \"response\": \"{{previousResults.response}}\"}'\n        }\n      }\n    ],\n    edges: [\n      { id: 'e1-2', source: 'trigger-1', target: 'openai-1' },\n      { id: 'e2-3', source: 'openai-1', target: 'condition-1' },\n      { id: 'e3-4', source: 'condition-1', target: 'email-1', sourceHandle: 'true' },\n      { id: 'e3-5', source: 'condition-1', target: 'escalate-1', sourceHandle: 'false' }\n    ]\n  },\n\n  'content-generator': {\n    id: 'content-generator',\n    name: 'Content Generator',\n    description: 'Generate blog posts, social media content, and marketing materials',\n    category: 'content',\n    nodes: [\n      {\n        id: 'manual-1',\n        type: 'customNode',\n        position: { x: 100, y: 100 },\n        data: {\n          nodeType: 'manual',\n          label: 'Manual Trigger',\n          description: 'Start content generation process',\n          category: 'inputs'\n        }\n      },\n      {\n        id: 'openai-1',\n        type: 'customNode',\n        position: { x: 400, y: 100 },\n        data: {\n          nodeType: 'openai',\n          label: 'Generate Content',\n          description: 'Create engaging content based on topic',\n          category: 'ai',\n          model: 'gpt-4o',\n          temperature: 0.8,\n          maxTokens: 500,\n          systemPrompt: 'You are a content creation AI. Generate engaging, SEO-friendly content based on the provided topic and target audience.',\n          userMessage: 'Topic: {{input.topic}}\\nTarget Audience: {{input.audience}}\\nContent Type: {{input.contentType}}'\n        }\n      },\n      {\n        id: 'code-1',\n        type: 'customNode',\n        position: { x: 700, y: 100 },\n        data: {\n          nodeType: 'code',\n          label: 'Format Output',\n          description: 'Format content for publishing',\n          category: 'processing',\n          language: 'javascript',\n          code: `\n// Format the generated content\nconst content = previousResults['openai-1'].response;\nconst formatted = {\n  title: content.split('\\\\n')[0],\n  body: content.split('\\\\n').slice(1).join('\\\\n'),\n  wordCount: content.split(' ').length,\n  generatedAt: new Date().toISOString()\n};\nreturn formatted;\n          `\n        }\n      }\n    ],\n    edges: [\n      { id: 'e1-2', source: 'manual-1', target: 'openai-1' },\n      { id: 'e2-3', source: 'openai-1', target: 'code-1' }\n    ]\n  },\n\n  'data-analysis': {\n    id: 'data-analysis',\n    name: 'Data Analysis Pipeline',\n    description: 'Automated data processing and insight generation with visualizations',\n    category: 'analytics',\n    nodes: [\n      {\n        id: 'schedule-1',\n        type: 'customNode',\n        position: { x: 100, y: 100 },\n        data: {\n          nodeType: 'schedule',\n          label: 'Daily Analysis',\n          description: 'Trigger daily at 9 AM',\n          category: 'inputs',\n          cron: '0 9 * * *',\n          timezone: 'UTC'\n        }\n      },\n      {\n        id: 'code-1',\n        type: 'customNode',\n        position: { x: 400, y: 100 },\n        data: {\n          nodeType: 'code',\n          label: 'Fetch Data',\n          description: 'Retrieve data from database',\n          category: 'processing',\n          language: 'javascript',\n          code: `\n// Simulate data fetching\nconst data = {\n  sales: Math.floor(Math.random() * 10000) + 5000,\n  users: Math.floor(Math.random() * 1000) + 500,\n  revenue: Math.floor(Math.random() * 50000) + 20000\n};\nreturn { data, timestamp: new Date().toISOString() };\n          `\n        }\n      },\n      {\n        id: 'openai-1',\n        type: 'customNode',\n        position: { x: 700, y: 100 },\n        data: {\n          nodeType: 'openai',\n          label: 'Generate Insights',\n          description: 'AI-powered data analysis',\n          category: 'ai',\n          model: 'gpt-4o',\n          temperature: 0.3,\n          systemPrompt: 'You are a data analyst AI. Analyze the provided data and generate actionable insights and recommendations.',\n          userMessage: 'Data to analyze: {{previousResults}}'\n        }\n      },\n      {\n        id: 'email-1',\n        type: 'customNode',\n        position: { x: 1000, y: 100 },\n        data: {\n          nodeType: 'email',\n          label: 'Daily Report',\n          description: 'Send analysis report to team',\n          category: 'outputs',\n          to: 'analytics@company.com',\n          subject: 'Daily Analytics Report - {{new Date().toDateString()}}',\n          body: 'Here are today\\'s insights:\\n\\n{{previousResults.response}}'\n        }\n      }\n    ],\n    edges: [\n      { id: 'e1-2', source: 'schedule-1', target: 'code-1' },\n      { id: 'e2-3', source: 'code-1', target: 'openai-1' },\n      { id: 'e3-4', source: 'openai-1', target: 'email-1' }\n    ]\n  }\n};\n\nexport type TemplateKey = keyof typeof WORKFLOW_TEMPLATES;\n","size_bytes":7119},"client/src/pages/auth.tsx":{"content":"import { useState } from 'react';\nimport { LoginForm } from '../components/auth/login-form';\nimport { RegisterForm } from '../components/auth/register-form';\n\nexport function AuthPage() {\n  const [mode, setMode] = useState<'login' | 'register'>('login');\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-background to-muted flex items-center justify-center p-4\" data-testid=\"auth-page\">\n      <div className=\"w-full max-w-md\">\n        {mode === 'login' ? (\n          <LoginForm onSwitchToRegister={() => setMode('register')} />\n        ) : (\n          <RegisterForm onSwitchToLogin={() => setMode('login')} />\n        )}\n      </div>\n    </div>\n  );\n}","size_bytes":670},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/workflow-builder.tsx":{"content":"import React, { useState, useCallback, useRef } from 'react';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { useParams } from 'wouter';\nimport ReactFlow, { \n  Node, \n  Edge, \n  addEdge, \n  useNodesState, \n  useEdgesState, \n  Controls, \n  Background,\n  Connection,\n  ConnectionMode,\n  Panel\n} from 'reactflow';\nimport 'reactflow/dist/style.css';\n\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Badge } from '@/components/ui/badge';\nimport { Separator } from '@/components/ui/separator';\nimport { useToast } from '@/hooks/use-toast';\nimport { apiRequest } from '@/lib/queryClient';\nimport { NodeLibrary } from '@/components/workflow/node-library';\nimport { PropertiesPanel } from '@/components/workflow/properties-panel';\nimport { CustomNode } from '@/components/workflow/custom-node';\nimport { TemplateModal } from '@/components/ui/template-modal';\nimport { NODE_TYPES } from '@/lib/node-types';\nimport { type Workflow, type WorkflowNode, type WorkflowEdge } from '@shared/schema';\n\nconst nodeTypes = {\n  customNode: CustomNode,\n};\n\nexport default function WorkflowBuilder() {\n  const { id: workflowId } = useParams();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const reactFlowWrapper = useRef<HTMLDivElement>(null);\n  const [reactFlowInstance, setReactFlowInstance] = useState<any>(null);\n  \n  const [nodes, setNodes, onNodesChange] = useNodesState([]);\n  const [edges, setEdges, onEdgesChange] = useEdgesState([]);\n  const [selectedNode, setSelectedNode] = useState<Node | null>(null);\n  const [workflowName, setWorkflowName] = useState('New Workflow');\n  const [isTemplateModalOpen, setIsTemplateModalOpen] = useState(false);\n  const [executionStatus, setExecutionStatus] = useState<string>('Ready');\n  const [leftSidebarOpen, setLeftSidebarOpen] = useState(true);\n  const [rightSidebarOpen, setRightSidebarOpen] = useState(true);\n\n  // Load workflow if ID is provided\n  const { data: workflow, isLoading } = useQuery({\n    queryKey: ['/api/workflows', workflowId],\n    enabled: !!workflowId,\n  });\n\n  // Handle workflow loading success\n  React.useEffect(() => {\n    if (workflow) {\n      const workflowData = workflow as Workflow;\n      setWorkflowName(workflowData.name);\n      setNodes(workflowData.nodes as Node[] || []);\n      setEdges(workflowData.edges as Edge[] || []);\n    }\n  }, [workflow]);\n\n  // Save workflow mutation\n  const saveWorkflowMutation = useMutation({\n    mutationFn: async (workflowData: any) => {\n      if (workflowId) {\n        return apiRequest('PUT', `/api/workflows/${workflowId}`, workflowData);\n      } else {\n        return apiRequest('POST', '/api/workflows', workflowData);\n      }\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Workflow saved successfully\",\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/workflows'] });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to save workflow\",\n        variant: \"destructive\",\n      });\n    }\n  });\n\n  // Execute workflow mutation\n  const executeWorkflowMutation = useMutation({\n    mutationFn: async (input: any) => {\n      if (!workflowId) throw new Error('No workflow ID');\n      return apiRequest('POST', `/api/workflows/${workflowId}/execute`, input);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Workflow executed successfully\",\n      });\n      setExecutionStatus('Completed');\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to execute workflow\",\n        variant: \"destructive\",\n      });\n      setExecutionStatus('Failed');\n    }\n  });\n\n  const onConnect = useCallback(\n    (params: Connection) => setEdges((eds) => addEdge(params, eds)),\n    [setEdges]\n  );\n\n  const onDragOver = useCallback((event: React.DragEvent) => {\n    event.preventDefault();\n    event.dataTransfer.dropEffect = 'move';\n  }, []);\n\n  const onDrop = useCallback(\n    (event: React.DragEvent) => {\n      event.preventDefault();\n\n      if (!reactFlowWrapper.current || !reactFlowInstance) return;\n\n      const reactFlowBounds = reactFlowWrapper.current.getBoundingClientRect();\n      const nodeType = event.dataTransfer.getData('application/reactflow');\n\n      if (!nodeType) return;\n\n      const position = reactFlowInstance.project({\n        x: event.clientX - reactFlowBounds.left,\n        y: event.clientY - reactFlowBounds.top,\n      });\n\n      const nodeConfig = NODE_TYPES[nodeType as keyof typeof NODE_TYPES];\n      const newNode: Node = {\n        id: `${nodeType}-${Date.now()}`,\n        type: 'customNode',\n        position,\n        data: {\n          nodeType,\n          label: nodeConfig.label,\n          description: nodeConfig.description,\n          category: nodeConfig.category,\n          ...nodeConfig.defaultData,\n        },\n      };\n\n      setNodes((nds) => nds.concat(newNode));\n    },\n    [reactFlowInstance, setNodes]\n  );\n\n  const onNodeClick = useCallback((event: React.MouseEvent, node: Node) => {\n    setSelectedNode(node);\n  }, []);\n\n  const onPaneClick = useCallback(() => {\n    setSelectedNode(null);\n  }, []);\n\n  const handleSave = useCallback(() => {\n    const workflowData = {\n      name: workflowName,\n      description: `AI workflow with ${nodes.length} nodes`,\n      nodes: nodes as WorkflowNode[],\n      edges: edges as WorkflowEdge[],\n      settings: {},\n      isActive: true,\n    };\n\n    saveWorkflowMutation.mutate(workflowData);\n  }, [workflowName, nodes, edges, saveWorkflowMutation]);\n\n  const handleExecute = useCallback(() => {\n    if (!workflowId) {\n      toast({\n        title: \"Error\",\n        description: \"Please save the workflow before executing\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    setExecutionStatus('Running');\n    executeWorkflowMutation.mutate({ message: 'Hello from workflow builder!' });\n  }, [workflowId, executeWorkflowMutation, toast]);\n\n  const handleNodeUpdate = useCallback((nodeId: string, updates: any) => {\n    setNodes((nds) => \n      nds.map((node) => \n        node.id === nodeId \n          ? { ...node, data: { ...node.data, ...updates } }\n          : node\n      )\n    );\n  }, [setNodes]);\n\n  const handleNodeDelete = useCallback((nodeId: string) => {\n    setNodes((nds) => nds.filter((node) => node.id !== nodeId));\n    setEdges((eds) => eds.filter((edge) => edge.source !== nodeId && edge.target !== nodeId));\n    setSelectedNode(null);\n  }, [setNodes, setEdges]);\n\n  const handleTemplateLoad = useCallback((template: any) => {\n    setWorkflowName(template.name);\n    setNodes(template.nodes.map((node: any) => ({\n      ...node,\n      type: 'customNode',\n    })));\n    setEdges(template.edges);\n    setIsTemplateModalOpen(false);\n    \n    toast({\n      title: \"Success\",\n      description: \"Template loaded successfully\",\n    });\n  }, [setNodes, setEdges, toast]);\n\n  if (isLoading) {\n    return <div className=\"flex items-center justify-center h-screen\">Loading...</div>;\n  }\n\n  return (\n    <div className=\"h-screen flex flex-col bg-gray-50\">\n      {/* Header */}\n      <header className=\"bg-white border-b border-gray-200 px-6 py-3 flex items-center justify-between z-20\">\n        <div className=\"flex items-center space-x-4\">\n          <div className=\"flex items-center space-x-2\">\n            <div className=\"w-8 h-8 bg-primary rounded-lg flex items-center justify-center\">\n              <svg className=\"w-5 h-5 text-white\" fill=\"currentColor\" viewBox=\"0 0 24 24\">\n                <path d=\"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8zm-1-13h2v6h-2zm0 8h2v2h-2z\"/>\n              </svg>\n            </div>\n            <h1 className=\"text-xl font-bold text-gray-900\" data-testid=\"app-title\">DTA Mind</h1>\n          </div>\n          \n          <nav className=\"hidden md:flex items-center space-x-1\">\n            <Button variant=\"ghost\" size=\"sm\" className=\"text-primary bg-primary/10\" data-testid=\"nav-workflows\">\n              Workflows\n            </Button>\n            <Button variant=\"ghost\" size=\"sm\" onClick={() => setIsTemplateModalOpen(true)} data-testid=\"nav-templates\">\n              Templates\n            </Button>\n            <Button variant=\"ghost\" size=\"sm\" data-testid=\"nav-agents\">\n              Agents\n            </Button>\n            <Button variant=\"ghost\" size=\"sm\" data-testid=\"nav-docs\">\n              Docs\n            </Button>\n          </nav>\n        </div>\n\n        <div className=\"flex items-center space-x-4\">\n          <div className=\"flex items-center space-x-2\">\n            <Input \n              value={workflowName}\n              onChange={(e) => setWorkflowName(e.target.value)}\n              className=\"w-48 text-sm\"\n              data-testid=\"workflow-name-input\"\n            />\n            <div className=\"flex items-center space-x-1\">\n              <div className=\"w-2 h-2 bg-green-500 rounded-full\"></div>\n              <span className=\"text-xs text-gray-500\" data-testid=\"save-status\">Saved</span>\n            </div>\n          </div>\n          \n          <div className=\"flex items-center space-x-2\">\n            <Button \n              variant=\"outline\" \n              size=\"sm\" \n              onClick={handleSave}\n              disabled={saveWorkflowMutation.isPending}\n              data-testid=\"button-save\"\n            >\n              Save\n            </Button>\n            <Button \n              size=\"sm\" \n              onClick={handleExecute}\n              disabled={executeWorkflowMutation.isPending}\n              data-testid=\"button-execute\"\n            >\n              {executeWorkflowMutation.isPending ? 'Running...' : 'Execute'}\n            </Button>\n          </div>\n\n          <div className=\"flex items-center space-x-2\">\n            <Badge \n              variant={\n                executionStatus === 'Running' ? 'default' :\n                executionStatus === 'Completed' ? 'default' :\n                executionStatus === 'Failed' ? 'destructive' : \n                'secondary'\n              }\n              data-testid=\"execution-status\"\n            >\n              <div className={`w-2 h-2 rounded-full mr-2 ${\n                executionStatus === 'Running' ? 'bg-yellow-500 animate-pulse' :\n                executionStatus === 'Completed' ? 'bg-green-500' :\n                executionStatus === 'Failed' ? 'bg-red-500' :\n                'bg-green-500'\n              }`}></div>\n              {executionStatus}\n            </Badge>\n          </div>\n        </div>\n      </header>\n\n      <div className=\"flex flex-1 overflow-hidden\">\n        {/* Left Sidebar - Node Library */}\n        {leftSidebarOpen && (\n          <div className=\"w-80 bg-white border-r border-gray-200 flex flex-col\">\n            <NodeLibrary />\n          </div>\n        )}\n\n        {/* Main Canvas */}\n        <div className=\"flex-1 relative\" ref={reactFlowWrapper} data-testid=\"workflow-canvas\">\n          <ReactFlow\n            nodes={nodes}\n            edges={edges}\n            onNodesChange={onNodesChange}\n            onEdgesChange={onEdgesChange}\n            onConnect={onConnect}\n            onInit={setReactFlowInstance}\n            onDrop={onDrop}\n            onDragOver={onDragOver}\n            onNodeClick={onNodeClick}\n            onPaneClick={onPaneClick}\n            nodeTypes={nodeTypes}\n            connectionMode={ConnectionMode.Loose}\n            fitView\n            className=\"workflow-canvas\"\n          >\n            <Controls />\n            <Background color=\"#e5e7eb\" gap={20} />\n            \n            <Panel position=\"top-right\" className=\"bg-white border border-gray-200 rounded-lg p-2 shadow-sm\">\n              <div className=\"flex items-center space-x-2\">\n                <Button \n                  variant=\"ghost\" \n                  size=\"sm\"\n                  onClick={() => setLeftSidebarOpen(!leftSidebarOpen)}\n                  data-testid=\"toggle-left-sidebar\"\n                >\n                  {leftSidebarOpen ? '←' : '→'}\n                </Button>\n                <Separator orientation=\"vertical\" className=\"h-4\" />\n                <Button \n                  variant=\"ghost\" \n                  size=\"sm\"\n                  onClick={() => setRightSidebarOpen(!rightSidebarOpen)}\n                  data-testid=\"toggle-right-sidebar\"\n                >\n                  {rightSidebarOpen ? '→' : '←'}\n                </Button>\n              </div>\n            </Panel>\n          </ReactFlow>\n        </div>\n\n        {/* Right Sidebar - Properties Panel */}\n        {rightSidebarOpen && (\n          <div className=\"w-80 bg-white border-l border-gray-200 flex flex-col\">\n            <PropertiesPanel \n              selectedNode={selectedNode}\n              onNodeUpdate={handleNodeUpdate}\n              onNodeDelete={handleNodeDelete}\n              workflowName={workflowName}\n              onWorkflowNameChange={setWorkflowName}\n            />\n          </div>\n        )}\n      </div>\n\n      {/* Template Modal */}\n      <TemplateModal \n        open={isTemplateModalOpen}\n        onOpenChange={setIsTemplateModalOpen}\n        onTemplateSelect={handleTemplateLoad}\n      />\n    </div>\n  );\n}\n","size_bytes":13271},"client/src/components/auth/login-form.tsx":{"content":"import { useState } from 'react';\nimport { useAuth } from '../../lib/auth';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Card, CardContent, CardHeader, CardTitle, CardDescription } from '@/components/ui/card';\nimport { Alert, AlertDescription } from '@/components/ui/alert';\nimport { Loader2 } from 'lucide-react';\n\ninterface LoginFormProps {\n  onSwitchToRegister: () => void;\n}\n\nexport function LoginForm({ onSwitchToRegister }: LoginFormProps) {\n  const { login } = useAuth();\n  const [email, setEmail] = useState('demo@example.com');\n  const [password, setPassword] = useState('demo123');\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setIsLoading(true);\n    setError(null);\n\n    try {\n      await login(email, password);\n    } catch (error) {\n      setError(error instanceof Error ? error.message : 'Login failed');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <Card className=\"w-full max-w-md mx-auto\" data-testid=\"login-card\">\n      <CardHeader>\n        <CardTitle data-testid=\"login-title\">Sign In</CardTitle>\n        <CardDescription data-testid=\"login-description\">\n          Enter your email and password to access DTA Mind\n        </CardDescription>\n      </CardHeader>\n      <CardContent>\n        {error && (\n          <Alert variant=\"destructive\" className=\"mb-4\" data-testid=\"login-error\">\n            <AlertDescription>{error}</AlertDescription>\n          </Alert>\n        )}\n        \n        <form onSubmit={handleSubmit} className=\"space-y-4\">\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"email\" data-testid=\"label-email\">Email</Label>\n            <Input\n              id=\"email\"\n              type=\"email\"\n              placeholder=\"Enter your email\"\n              value={email}\n              onChange={(e) => setEmail(e.target.value)}\n              disabled={isLoading}\n              required\n              data-testid=\"input-email\"\n            />\n          </div>\n          \n          <div className=\"space-y-2\">\n            <Label htmlFor=\"password\" data-testid=\"label-password\">Password</Label>\n            <Input\n              id=\"password\"\n              type=\"password\"\n              placeholder=\"Enter your password\"\n              value={password}\n              onChange={(e) => setPassword(e.target.value)}\n              disabled={isLoading}\n              required\n              data-testid=\"input-password\"\n            />\n          </div>\n          \n          <Button \n            type=\"submit\" \n            className=\"w-full\" \n            disabled={isLoading}\n            data-testid=\"button-login\"\n          >\n            {isLoading ? (\n              <>\n                <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                Signing in...\n              </>\n            ) : (\n              'Sign In'\n            )}\n          </Button>\n        </form>\n        \n        <div className=\"mt-4 text-center text-sm\">\n          <span className=\"text-muted-foreground\">Don't have an account? </span>\n          <button\n            type=\"button\"\n            onClick={onSwitchToRegister}\n            className=\"text-primary hover:underline\"\n            data-testid=\"link-register\"\n          >\n            Sign up\n          </button>\n        </div>\n        \n        <div className=\"mt-4 p-3 bg-muted rounded-md\">\n          <p className=\"text-sm text-muted-foreground mb-2\">Demo Account:</p>\n          <p className=\"text-xs\">Email: demo@example.com</p>\n          <p className=\"text-xs\">Password: demo123</p>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":3791},"client/src/components/auth/register-form.tsx":{"content":"import { useState } from 'react';\nimport { useAuth } from '../../lib/auth';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Card, CardContent, CardHeader, CardTitle, CardDescription } from '@/components/ui/card';\nimport { Alert, AlertDescription } from '@/components/ui/alert';\nimport { Loader2 } from 'lucide-react';\n\ninterface RegisterFormProps {\n  onSwitchToLogin: () => void;\n}\n\nexport function RegisterForm({ onSwitchToLogin }: RegisterFormProps) {\n  const { register } = useAuth();\n  const [username, setUsername] = useState('');\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [confirmPassword, setConfirmPassword] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setIsLoading(true);\n    setError(null);\n\n    if (password !== confirmPassword) {\n      setError('Passwords do not match');\n      setIsLoading(false);\n      return;\n    }\n\n    if (password.length < 6) {\n      setError('Password must be at least 6 characters long');\n      setIsLoading(false);\n      return;\n    }\n\n    try {\n      await register(username, email, password);\n    } catch (error) {\n      setError(error instanceof Error ? error.message : 'Registration failed');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <Card className=\"w-full max-w-md mx-auto\" data-testid=\"register-card\">\n      <CardHeader>\n        <CardTitle data-testid=\"register-title\">Create Account</CardTitle>\n        <CardDescription data-testid=\"register-description\">\n          Join DTA Mind to create and manage your AI workflows\n        </CardDescription>\n      </CardHeader>\n      <CardContent>\n        {error && (\n          <Alert variant=\"destructive\" className=\"mb-4\" data-testid=\"register-error\">\n            <AlertDescription>{error}</AlertDescription>\n          </Alert>\n        )}\n        \n        <form onSubmit={handleSubmit} className=\"space-y-4\">\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"username\" data-testid=\"label-username\">Username</Label>\n            <Input\n              id=\"username\"\n              type=\"text\"\n              placeholder=\"Choose a username\"\n              value={username}\n              onChange={(e) => setUsername(e.target.value)}\n              disabled={isLoading}\n              required\n              data-testid=\"input-username\"\n            />\n          </div>\n          \n          <div className=\"space-y-2\">\n            <Label htmlFor=\"email\" data-testid=\"label-email\">Email</Label>\n            <Input\n              id=\"email\"\n              type=\"email\"\n              placeholder=\"Enter your email\"\n              value={email}\n              onChange={(e) => setEmail(e.target.value)}\n              disabled={isLoading}\n              required\n              data-testid=\"input-email\"\n            />\n          </div>\n          \n          <div className=\"space-y-2\">\n            <Label htmlFor=\"password\" data-testid=\"label-password\">Password</Label>\n            <Input\n              id=\"password\"\n              type=\"password\"\n              placeholder=\"Create a password\"\n              value={password}\n              onChange={(e) => setPassword(e.target.value)}\n              disabled={isLoading}\n              required\n              minLength={6}\n              data-testid=\"input-password\"\n            />\n          </div>\n          \n          <div className=\"space-y-2\">\n            <Label htmlFor=\"confirmPassword\" data-testid=\"label-confirm-password\">Confirm Password</Label>\n            <Input\n              id=\"confirmPassword\"\n              type=\"password\"\n              placeholder=\"Confirm your password\"\n              value={confirmPassword}\n              onChange={(e) => setConfirmPassword(e.target.value)}\n              disabled={isLoading}\n              required\n              minLength={6}\n              data-testid=\"input-confirm-password\"\n            />\n          </div>\n          \n          <Button \n            type=\"submit\" \n            className=\"w-full\" \n            disabled={isLoading}\n            data-testid=\"button-register\"\n          >\n            {isLoading ? (\n              <>\n                <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                Creating account...\n              </>\n            ) : (\n              'Create Account'\n            )}\n          </Button>\n        </form>\n        \n        <div className=\"mt-4 text-center text-sm\">\n          <span className=\"text-muted-foreground\">Already have an account? </span>\n          <button\n            type=\"button\"\n            onClick={onSwitchToLogin}\n            className=\"text-primary hover:underline\"\n            data-testid=\"link-login\"\n          >\n            Sign in\n          </button>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":5004},"client/src/components/layout/navbar.tsx":{"content":"import { useAuth } from '../../lib/auth';\nimport { Button } from '@/components/ui/button';\nimport { Avatar, AvatarFallback } from '@/components/ui/avatar';\nimport { \n  DropdownMenu, \n  DropdownMenuContent, \n  DropdownMenuItem, \n  DropdownMenuTrigger \n} from '@/components/ui/dropdown-menu';\nimport { LogOut, User } from 'lucide-react';\n\nexport function Navbar() {\n  const { user, logout } = useAuth();\n\n  return (\n    <nav className=\"border-b bg-background/95 backdrop-blur supports-[backdrop-filter]:bg-background/60\" data-testid=\"navbar\">\n      <div className=\"container mx-auto px-4 h-16 flex items-center justify-between\">\n        <div className=\"flex items-center space-x-4\">\n          <h1 className=\"text-xl font-bold text-primary\" data-testid=\"app-title\">DTA Mind</h1>\n        </div>\n\n        {user && (\n          <div className=\"flex items-center space-x-4\">\n            <span className=\"text-sm text-muted-foreground\" data-testid=\"user-welcome\">\n              Welcome, {user.username}\n            </span>\n            \n            <DropdownMenu>\n              <DropdownMenuTrigger asChild>\n                <Button variant=\"ghost\" className=\"relative h-8 w-8 rounded-full\" data-testid=\"user-menu\">\n                  <Avatar className=\"h-8 w-8\">\n                    <AvatarFallback data-testid=\"user-avatar\">\n                      {user.username.charAt(0).toUpperCase()}\n                    </AvatarFallback>\n                  </Avatar>\n                </Button>\n              </DropdownMenuTrigger>\n              <DropdownMenuContent className=\"w-56\" align=\"end\" forceMount>\n                <DropdownMenuItem disabled>\n                  <User className=\"mr-2 h-4 w-4\" />\n                  <span>{user.email}</span>\n                </DropdownMenuItem>\n                <DropdownMenuItem onClick={logout} data-testid=\"logout-item\">\n                  <LogOut className=\"mr-2 h-4 w-4\" />\n                  <span>Log out</span>\n                </DropdownMenuItem>\n              </DropdownMenuContent>\n            </DropdownMenu>\n          </div>\n        )}\n      </div>\n    </nav>\n  );\n}","size_bytes":2088},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/template-modal.tsx":{"content":"import React from 'react';\nimport { useQuery } from '@tanstack/react-query';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Input } from '@/components/ui/input';\nimport { useToast } from '@/hooks/use-toast';\n\ninterface Template {\n  id: string;\n  name: string;\n  description: string;\n  category: string;\n  nodes: any[];\n  edges: any[];\n}\n\ninterface TemplateModalProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n  onTemplateSelect: (template: Template) => void;\n}\n\nexport function TemplateModal({ open, onOpenChange, onTemplateSelect }: TemplateModalProps) {\n  const { toast } = useToast();\n  const [searchTerm, setSearchTerm] = React.useState('');\n\n  const { data: templates = [], isLoading } = useQuery({\n    queryKey: ['/api/templates'],\n    enabled: open,\n  });\n\n  const filteredTemplates = (templates as Template[]).filter((template: Template) =>\n    template.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n    template.description.toLowerCase().includes(searchTerm.toLowerCase())\n  );\n\n  const handleTemplateSelect = (template: Template) => {\n    onTemplateSelect(template);\n    onOpenChange(false);\n  };\n\n  const getNodeTypeColor = (nodeType: string) => {\n    if (nodeType.includes('webhook') || nodeType.includes('manual') || nodeType.includes('schedule')) {\n      return 'bg-blue-100 text-blue-800';\n    }\n    if (nodeType.includes('openai') || nodeType.includes('ai') || nodeType.includes('gpt')) {\n      return 'bg-amber-100 text-amber-800';\n    }\n    if (nodeType.includes('code') || nodeType.includes('condition') || nodeType.includes('merge')) {\n      return 'bg-emerald-100 text-emerald-800';\n    }\n    return 'bg-red-100 text-red-800';\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"max-w-4xl max-h-[80vh] overflow-hidden\" data-testid=\"template-modal\">\n        <DialogHeader>\n          <DialogTitle className=\"text-xl font-bold text-gray-900\">\n            Workflow Templates\n          </DialogTitle>\n          <p className=\"text-gray-600 mt-2\">\n            Choose from pre-built templates to get started quickly\n          </p>\n        </DialogHeader>\n        \n        <div className=\"space-y-4\">\n          <Input\n            placeholder=\"Search templates...\"\n            value={searchTerm}\n            onChange={(e) => setSearchTerm(e.target.value)}\n            data-testid=\"template-search\"\n          />\n          \n          <div className=\"overflow-y-auto max-h-96\">\n            {isLoading ? (\n              <div className=\"flex items-center justify-center py-8\">\n                <div className=\"text-gray-500\">Loading templates...</div>\n              </div>\n            ) : (\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                {filteredTemplates.map((template: Template) => (\n                  <div\n                    key={template.id}\n                    className=\"p-4 border border-gray-200 rounded-lg hover:shadow-md transition-all duration-200 cursor-pointer group\"\n                    onClick={() => handleTemplateSelect(template)}\n                    data-testid={`template-${template.id}`}\n                  >\n                    <div className=\"space-y-3\">\n                      <div>\n                        <h3 className=\"font-semibold text-gray-900 group-hover:text-primary transition-colors\">\n                          {template.name}\n                        </h3>\n                        <p className=\"text-sm text-gray-600 mt-1\">\n                          {template.description}\n                        </p>\n                      </div>\n                      \n                      <div className=\"flex flex-wrap gap-1\">\n                        {template.nodes?.slice(0, 4).map((node: any, index: number) => {\n                          const nodeType = node.data?.name || node.type || `Node ${index + 1}`;\n                          return (\n                            <Badge\n                              key={index}\n                              variant=\"secondary\"\n                              className={`text-xs ${getNodeTypeColor(nodeType)}`}\n                            >\n                              {nodeType}\n                            </Badge>\n                          );\n                        })}\n                        {template.nodes && template.nodes.length > 4 && (\n                          <Badge variant=\"secondary\" className=\"text-xs bg-gray-100 text-gray-600\">\n                            +{template.nodes.length - 4} more\n                          </Badge>\n                        )}\n                      </div>\n\n                      <div className=\"flex items-center justify-between pt-2\">\n                        <div className=\"flex items-center space-x-2 text-xs text-gray-500\">\n                          <span>{template.nodes?.length || 0} nodes</span>\n                          <span>•</span>\n                          <span>{template.edges?.length || 0} connections</span>\n                        </div>\n                        <Button \n                          variant=\"ghost\" \n                          size=\"sm\"\n                          className=\"text-primary hover:text-primary/80\"\n                          data-testid={`use-template-${template.id}`}\n                        >\n                          Use Template\n                        </Button>\n                      </div>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            )}\n            \n            {!isLoading && filteredTemplates.length === 0 && (\n              <div className=\"text-center py-8 text-gray-500\">\n                {searchTerm ? 'No templates found matching your search.' : 'No templates available.'}\n              </div>\n            )}\n          </div>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":5987},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/components/workflow/canvas.tsx":{"content":"import React, { useCallback, useRef, useState } from 'react';\nimport ReactFlow, { \n  Node, \n  Edge, \n  addEdge, \n  useNodesState, \n  useEdgesState, \n  Controls, \n  Background,\n  Connection,\n  ConnectionMode,\n  Panel,\n  MiniMap,\n  ReactFlowProvider,\n  useReactFlow\n} from 'reactflow';\nimport 'reactflow/dist/style.css';\n\nimport { Button } from '@/components/ui/button';\nimport { Separator } from '@/components/ui/separator';\nimport { CustomNode } from './custom-node';\nimport { NODE_TYPES } from '@/lib/node-types';\n\nconst nodeTypes = {\n  customNode: CustomNode,\n};\n\ninterface CanvasProps {\n  nodes: Node[];\n  edges: Edge[];\n  onNodesChange: any;\n  onEdgesChange: any;\n  onNodeClick: (event: React.MouseEvent, node: Node) => void;\n  onPaneClick: () => void;\n  onNodeUpdate: (nodeId: string, updates: any) => void;\n  onNodeDelete: (nodeId: string) => void;\n  leftSidebarOpen: boolean;\n  rightSidebarOpen: boolean;\n  onToggleLeftSidebar: () => void;\n  onToggleRightSidebar: () => void;\n  executionStatus: string;\n}\n\nfunction CanvasContent({\n  nodes,\n  edges,\n  onNodesChange,\n  onEdgesChange,\n  onNodeClick,\n  onPaneClick,\n  onNodeUpdate,\n  onNodeDelete,\n  leftSidebarOpen,\n  rightSidebarOpen,\n  onToggleLeftSidebar,\n  onToggleRightSidebar,\n  executionStatus\n}: CanvasProps) {\n  const reactFlowWrapper = useRef<HTMLDivElement>(null);\n  const reactFlowInstance = useReactFlow();\n  const [isDragOver, setIsDragOver] = useState(false);\n\n  const onConnect = useCallback(\n    (params: Connection) => {\n      const newEdge = {\n        ...params,\n        id: `edge-${Date.now()}`,\n        type: 'smoothstep',\n        animated: executionStatus === 'Running',\n        style: {\n          stroke: executionStatus === 'Running' ? '#3b82f6' : '#6b7280',\n          strokeWidth: 2,\n        },\n      };\n      onEdgesChange([{ type: 'add', item: newEdge }]);\n    },\n    [onEdgesChange, executionStatus]\n  );\n\n  const onDragOver = useCallback((event: React.DragEvent) => {\n    event.preventDefault();\n    event.dataTransfer.dropEffect = 'move';\n    setIsDragOver(true);\n  }, []);\n\n  const onDragLeave = useCallback((event: React.DragEvent) => {\n    event.preventDefault();\n    setIsDragOver(false);\n  }, []);\n\n  const onDrop = useCallback(\n    (event: React.DragEvent) => {\n      event.preventDefault();\n      setIsDragOver(false);\n\n      if (!reactFlowWrapper.current || !reactFlowInstance) return;\n\n      const reactFlowBounds = reactFlowWrapper.current.getBoundingClientRect();\n      const nodeType = event.dataTransfer.getData('application/reactflow');\n\n      if (!nodeType) return;\n\n      const position = reactFlowInstance.project({\n        x: event.clientX - reactFlowBounds.left,\n        y: event.clientY - reactFlowBounds.top,\n      });\n\n      const nodeConfig = NODE_TYPES[nodeType as keyof typeof NODE_TYPES];\n      const newNode: Node = {\n        id: `${nodeType}-${Date.now()}`,\n        type: 'customNode',\n        position,\n        data: {\n          nodeType,\n          label: nodeConfig.label,\n          description: nodeConfig.description,\n          category: nodeConfig.category,\n          ...nodeConfig.defaultData,\n        },\n      };\n\n      onNodesChange([{ type: 'add', item: newNode }]);\n    },\n    [reactFlowInstance, onNodesChange]\n  );\n\n  const onDeleteKeyPress = useCallback(\n    (event: KeyboardEvent) => {\n      if (event.key === 'Delete' || event.key === 'Backspace') {\n        const selectedNodes = nodes.filter(node => node.selected);\n        const selectedEdges = edges.filter(edge => edge.selected);\n        \n        selectedNodes.forEach(node => onNodeDelete(node.id));\n        selectedEdges.forEach(edge => {\n          onEdgesChange([{ type: 'remove', id: edge.id }]);\n        });\n      }\n    },\n    [nodes, edges, onNodeDelete, onEdgesChange]\n  );\n\n  React.useEffect(() => {\n    document.addEventListener('keydown', onDeleteKeyPress);\n    return () => {\n      document.removeEventListener('keydown', onDeleteKeyPress);\n    };\n  }, [onDeleteKeyPress]);\n\n  return (\n    <div className=\"flex-1 relative\" ref={reactFlowWrapper} data-testid=\"workflow-canvas\">\n      {/* Drop Zone Overlay */}\n      {isDragOver && (\n        <div className=\"absolute inset-0 z-50 bg-primary/5 border-2 border-dashed border-primary flex items-center justify-center pointer-events-none\">\n          <div className=\"bg-white px-6 py-3 rounded-lg shadow-lg border border-primary/20\">\n            <div className=\"text-primary font-medium\">Drop node here to add to workflow</div>\n          </div>\n        </div>\n      )}\n\n      <ReactFlow\n        nodes={nodes}\n        edges={edges}\n        onNodesChange={onNodesChange}\n        onEdgesChange={onEdgesChange}\n        onConnect={onConnect}\n        onDrop={onDrop}\n        onDragOver={onDragOver}\n        onDragLeave={onDragLeave}\n        onNodeClick={onNodeClick}\n        onPaneClick={onPaneClick}\n        nodeTypes={nodeTypes}\n        connectionMode={ConnectionMode.Loose}\n        fitView\n        className=\"workflow-canvas bg-gray-50\"\n        defaultViewport={{ x: 0, y: 0, zoom: 1 }}\n        minZoom={0.2}\n        maxZoom={2}\n        snapToGrid={true}\n        snapGrid={[20, 20]}\n        deleteKeyCode={null} // Disable default delete behavior\n      >\n        <Controls \n          className=\"react-flow__controls\"\n          showZoom={true}\n          showFitView={true}\n          showInteractive={true}\n        />\n        \n        <Background \n          color=\"#e5e7eb\" \n          gap={20} \n          size={1}\n        />\n        \n        <MiniMap\n          nodeColor={(node) => {\n            switch (node.data.category) {\n              case 'inputs':\n                return '#3b82f6';\n              case 'ai':\n                return '#f59e0b';\n              case 'processing':\n                return '#10b981';\n              case 'outputs':\n                return '#ef4444';\n              default:\n                return '#6b7280';\n            }\n          }}\n          nodeStrokeWidth={3}\n          nodeBorderRadius={8}\n          className=\"bg-white border border-gray-200 rounded-lg\"\n        />\n        \n        {/* Canvas Toolbar */}\n        <Panel position=\"top-right\" className=\"bg-white border border-gray-200 rounded-lg p-2 shadow-sm\">\n          <div className=\"flex items-center space-x-2\">\n            <Button \n              variant=\"ghost\" \n              size=\"sm\"\n              onClick={onToggleLeftSidebar}\n              className=\"p-2 h-8 w-8\"\n              data-testid=\"toggle-left-sidebar\"\n              title={leftSidebarOpen ? \"Hide Components\" : \"Show Components\"}\n            >\n              <svg className=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} \n                      d={leftSidebarOpen ? \"M11 19l-7-7 7-7m8 14l-7-7 7-7\" : \"M13 5l7 7-7 7M5 5l7 7-7 7\"} />\n              </svg>\n            </Button>\n            \n            <Separator orientation=\"vertical\" className=\"h-4\" />\n            \n            <Button \n              variant=\"ghost\" \n              size=\"sm\"\n              onClick={onToggleRightSidebar}\n              className=\"p-2 h-8 w-8\"\n              data-testid=\"toggle-right-sidebar\"\n              title={rightSidebarOpen ? \"Hide Properties\" : \"Show Properties\"}\n            >\n              <svg className=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} \n                      d={rightSidebarOpen ? \"M13 5l7 7-7 7M5 5l7 7-7 7\" : \"M11 19l-7-7 7-7m8 14l-7-7 7-7\"} />\n              </svg>\n            </Button>\n            \n            <Separator orientation=\"vertical\" className=\"h-4\" />\n            \n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={() => reactFlowInstance.fitView()}\n              className=\"p-2 h-8 w-8\"\n              title=\"Fit View\"\n              data-testid=\"fit-view-button\"\n            >\n              <svg className=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} \n                      d=\"M4 8V4m0 0h4M4 4l5 5m11-1V4m0 0h-4m4 0l-5 5M4 16v4m0 0h4m-4 0l5-5m11 5l-5-5m5 5v-4m0 4h-4\" />\n              </svg>\n            </Button>\n          </div>\n        </Panel>\n\n        {/* Execution Status Panel */}\n        <Panel position=\"top-left\" className=\"bg-white border border-gray-200 rounded-lg p-3 shadow-sm\">\n          <div className=\"flex items-center space-x-2\">\n            <div className={`w-2 h-2 rounded-full ${\n              executionStatus === 'Running' ? 'bg-yellow-500 animate-pulse' :\n              executionStatus === 'Completed' ? 'bg-green-500' :\n              executionStatus === 'Failed' ? 'bg-red-500' :\n              'bg-green-500'\n            }`}></div>\n            <span className=\"text-sm font-medium text-gray-700\" data-testid=\"canvas-execution-status\">\n              {executionStatus}\n            </span>\n          </div>\n        </Panel>\n\n        {/* Node Count Panel */}\n        <Panel position=\"bottom-left\" className=\"bg-white border border-gray-200 rounded-lg p-2 shadow-sm\">\n          <div className=\"flex items-center space-x-4 text-xs text-gray-500\">\n            <span data-testid=\"node-count\">{nodes.length} nodes</span>\n            <span data-testid=\"edge-count\">{edges.length} connections</span>\n          </div>\n        </Panel>\n      </ReactFlow>\n    </div>\n  );\n}\n\nexport function Canvas(props: CanvasProps) {\n  return (\n    <ReactFlowProvider>\n      <CanvasContent {...props} />\n    </ReactFlowProvider>\n  );\n}\n","size_bytes":9593},"client/src/components/workflow/custom-node.tsx":{"content":"import React from 'react';\nimport { Handle, Position, NodeProps } from 'reactflow';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\n\ninterface CustomNodeData {\n  nodeType: string;\n  label: string;\n  description: string;\n  category: string;\n  [key: string]: any;\n}\n\nexport function CustomNode({ data, selected, id }: NodeProps<CustomNodeData>) {\n  const getNodeColor = (category: string) => {\n    switch (category) {\n      case 'inputs':\n        return { bg: 'bg-blue-50', border: 'border-blue-200', accent: 'bg-blue-500' };\n      case 'ai':\n        return { bg: 'bg-amber-50', border: 'border-amber-200', accent: 'bg-amber-500' };\n      case 'processing':\n        return { bg: 'bg-emerald-50', border: 'border-emerald-200', accent: 'bg-emerald-500' };\n      case 'outputs':\n        return { bg: 'bg-red-50', border: 'border-red-200', accent: 'bg-red-500' };\n      default:\n        return { bg: 'bg-gray-50', border: 'border-gray-200', accent: 'bg-gray-500' };\n    }\n  };\n\n  const colors = getNodeColor(data.category);\n  const hasInput = data.category !== 'inputs';\n  const hasOutput = data.category !== 'outputs' || data.nodeType === 'webhook-response';\n\n  return (\n    <div \n      className={`\n        relative min-w-[200px] max-w-[250px] rounded-lg shadow-lg border-2 transition-all duration-200\n        ${colors.bg} ${colors.border}\n        ${selected ? 'ring-2 ring-primary ring-offset-2' : 'hover:shadow-xl'}\n      `}\n      data-testid={`node-${id}`}\n    >\n      {hasInput && (\n        <Handle\n          type=\"target\"\n          position={Position.Left}\n          className={`w-3 h-3 ${colors.accent} border-2 border-white`}\n          data-testid={`handle-input-${id}`}\n        />\n      )}\n\n      <div className=\"p-4\">\n        <div className=\"flex items-center justify-between mb-2\">\n          <div className=\"flex items-center space-x-2\">\n            <div className={`w-3 h-3 ${colors.accent} rounded-full`} />\n            <span className=\"text-sm font-semibold text-gray-900\">{data.label}</span>\n          </div>\n          {data.category === 'ai' && (\n            <Badge variant=\"secondary\" className=\"text-xs\">\n              {data.model || 'AI'}\n            </Badge>\n          )}\n        </div>\n\n        <p className=\"text-xs text-gray-600 mb-2\">{data.description}</p>\n\n        {/* Node-specific content */}\n        {data.nodeType === 'openai' && (\n          <div className=\"text-xs text-gray-500\">\n            <div>Model: {data.model || 'gpt-4o'}</div>\n            <div>Temperature: {data.temperature || 0.7}</div>\n          </div>\n        )}\n\n        {data.nodeType === 'condition' && data.condition && (\n          <div className=\"text-xs text-gray-500 font-mono bg-gray-100 px-2 py-1 rounded\">\n            {data.condition}\n          </div>\n        )}\n\n        {data.nodeType === 'email' && (\n          <div className=\"text-xs text-gray-500\">\n            <div>To: {data.to || 'Not configured'}</div>\n            <div>Subject: {data.subject || 'Not configured'}</div>\n          </div>\n        )}\n\n        {data.nodeType === 'code' && (\n          <div className=\"text-xs text-gray-500\">\n            Language: {data.language || 'javascript'}\n          </div>\n        )}\n      </div>\n\n      {hasOutput && (\n        <Handle\n          type=\"source\"\n          position={Position.Right}\n          className={`w-3 h-3 ${colors.accent} border-2 border-white`}\n          data-testid={`handle-output-${id}`}\n        />\n      )}\n\n      {/* Multiple outputs for condition nodes */}\n      {data.nodeType === 'condition' && (\n        <>\n          <Handle\n            type=\"source\"\n            position={Position.Right}\n            id=\"true\"\n            style={{ top: '30%' }}\n            className=\"w-3 h-3 bg-green-500 border-2 border-white\"\n            data-testid={`handle-output-true-${id}`}\n          />\n          <Handle\n            type=\"source\"\n            position={Position.Right}\n            id=\"false\"\n            style={{ top: '70%' }}\n            className=\"w-3 h-3 bg-red-500 border-2 border-white\"\n            data-testid={`handle-output-false-${id}`}\n          />\n        </>\n      )}\n    </div>\n  );\n}\n","size_bytes":4161},"client/src/components/workflow/node-library.tsx":{"content":"import React from 'react';\nimport { Input } from '@/components/ui/input';\nimport { Badge } from '@/components/ui/badge';\nimport { NODE_TYPES } from '@/lib/node-types';\n\nexport function NodeLibrary() {\n  const [searchTerm, setSearchTerm] = React.useState('');\n\n  const onDragStart = (event: React.DragEvent, nodeType: string) => {\n    event.dataTransfer.setData('application/reactflow', nodeType);\n    event.dataTransfer.effectAllowed = 'move';\n  };\n\n  const filteredNodeTypes = Object.entries(NODE_TYPES).filter(([key, config]) => \n    config.label.toLowerCase().includes(searchTerm.toLowerCase()) ||\n    config.description.toLowerCase().includes(searchTerm.toLowerCase())\n  );\n\n  const groupedNodeTypes = filteredNodeTypes.reduce((acc, [key, config]) => {\n    const category = config.category;\n    if (!acc[category]) {\n      acc[category] = [];\n    }\n    acc[category].push([key, config]);\n    return acc;\n  }, {} as Record<string, Array<[string, typeof NODE_TYPES[keyof typeof NODE_TYPES]]>>);\n\n  const categoryColors = {\n    inputs: 'bg-blue-50 border-blue-200 text-blue-800',\n    ai: 'bg-amber-50 border-amber-200 text-amber-800',\n    processing: 'bg-emerald-50 border-emerald-200 text-emerald-800',\n    outputs: 'bg-red-50 border-red-200 text-red-800',\n  };\n\n  return (\n    <>\n      <div className=\"p-4 border-b border-gray-200\">\n        <div className=\"flex items-center justify-between mb-3\">\n          <h3 className=\"text-sm font-semibold text-gray-900\">Components</h3>\n        </div>\n        <div className=\"relative\">\n          <Input\n            type=\"text\"\n            placeholder=\"Search components...\"\n            value={searchTerm}\n            onChange={(e) => setSearchTerm(e.target.value)}\n            className=\"pl-10\"\n            data-testid=\"search-components\"\n          />\n          <svg \n            className=\"absolute left-3 top-2.5 h-4 w-4 text-gray-400\" \n            fill=\"none\" \n            stroke=\"currentColor\" \n            viewBox=\"0 0 24 24\"\n          >\n            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"m21 21-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z\" />\n          </svg>\n        </div>\n      </div>\n\n      <div className=\"flex-1 overflow-y-auto p-4\">\n        <div className=\"space-y-6\">\n          {Object.entries(groupedNodeTypes).map(([category, nodes]) => (\n            <div key={category}>\n              <h4 className=\"text-xs font-semibold text-gray-500 uppercase tracking-wide mb-3\">\n                {category}\n              </h4>\n              <div className=\"space-y-2\">\n                {nodes.map(([nodeType, config]) => (\n                  <div\n                    key={nodeType}\n                    className={`p-3 rounded-lg cursor-pointer transition-all duration-200 hover:shadow-md border ${\n                      categoryColors[category as keyof typeof categoryColors]\n                    }`}\n                    draggable\n                    onDragStart={(e) => onDragStart(e, nodeType)}\n                    data-testid={`node-${nodeType}`}\n                  >\n                    <div className=\"flex items-center space-x-2 mb-1\">\n                      <div \n                        className={`w-3 h-3 rounded-full ${\n                          config.color === 'blue' ? 'bg-blue-500' :\n                          config.color === 'amber' ? 'bg-amber-500' :\n                          config.color === 'emerald' ? 'bg-emerald-500' :\n                          'bg-red-500'\n                        }`}\n                      />\n                      <span className=\"text-sm font-medium text-gray-900\">\n                        {config.label}\n                      </span>\n                    </div>\n                    <p className=\"text-xs text-gray-600\">{config.description}</p>\n                  </div>\n                ))}\n              </div>\n            </div>\n          ))}\n        </div>\n      </div>\n    </>\n  );\n}\n","size_bytes":3895},"client/src/components/workflow/properties-panel.tsx":{"content":"import React from 'react';\nimport { Node } from 'reactflow';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Slider } from '@/components/ui/slider';\nimport { Switch } from '@/components/ui/switch';\nimport { Separator } from '@/components/ui/separator';\nimport { Badge } from '@/components/ui/badge';\nimport { NODE_TYPES } from '@/lib/node-types';\nimport { LLM_PROVIDERS, getProviderModels, getProviderName, supportsSystemPrompt } from '@/lib/llm-providers';\n\ninterface PropertiesPanelProps {\n  selectedNode: Node | null;\n  onNodeUpdate: (nodeId: string, updates: any) => void;\n  onNodeDelete: (nodeId: string) => void;\n  workflowName: string;\n  onWorkflowNameChange: (name: string) => void;\n}\n\nexport function PropertiesPanel({ \n  selectedNode, \n  onNodeUpdate, \n  onNodeDelete,\n  workflowName,\n  onWorkflowNameChange\n}: PropertiesPanelProps) {\n  const updateNodeData = (key: string, value: any) => {\n    if (selectedNode) {\n      onNodeUpdate(selectedNode.id, { [key]: value });\n    }\n  };\n\n  if (!selectedNode) {\n    return (\n      <>\n        <div className=\"p-4 border-b border-gray-200\">\n          <h3 className=\"text-sm font-semibold text-gray-900\">Workflow Properties</h3>\n        </div>\n        \n        <div className=\"flex-1 overflow-y-auto p-4\">\n          <div className=\"space-y-4\">\n            <div>\n              <Label htmlFor=\"workflow-name\" className=\"text-xs font-semibold text-gray-700 uppercase tracking-wide\">\n                Workflow Settings\n              </Label>\n              <div className=\"mt-2 space-y-3\">\n                <div>\n                  <Label htmlFor=\"workflow-name\" className=\"text-sm font-medium text-gray-700\">\n                    Name\n                  </Label>\n                  <Input\n                    id=\"workflow-name\"\n                    value={workflowName}\n                    onChange={(e) => onWorkflowNameChange(e.target.value)}\n                    className=\"mt-1\"\n                    data-testid=\"workflow-name-input\"\n                  />\n                </div>\n                \n                <div>\n                  <Label htmlFor=\"workflow-description\" className=\"text-sm font-medium text-gray-700\">\n                    Description\n                  </Label>\n                  <Textarea\n                    id=\"workflow-description\"\n                    rows={3}\n                    placeholder=\"Describe your workflow...\"\n                    className=\"mt-1\"\n                    data-testid=\"workflow-description\"\n                  />\n                </div>\n              </div>\n            </div>\n\n            <div>\n              <Label className=\"text-xs font-semibold text-gray-700 uppercase tracking-wide\">\n                Execution Settings\n              </Label>\n              <div className=\"mt-2 space-y-3\">\n                <div className=\"flex items-center space-x-3\">\n                  <Switch id=\"error-handling\" defaultChecked data-testid=\"error-handling-switch\" />\n                  <Label htmlFor=\"error-handling\" className=\"text-sm text-gray-700\">\n                    Continue on error\n                  </Label>\n                </div>\n                \n                <div>\n                  <Label htmlFor=\"timeout\" className=\"text-sm font-medium text-gray-700\">\n                    Timeout (seconds)\n                  </Label>\n                  <Input\n                    id=\"timeout\"\n                    type=\"number\"\n                    defaultValue={300}\n                    className=\"mt-1\"\n                    data-testid=\"timeout-input\"\n                  />\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </>\n    );\n  }\n\n  const nodeConfig = NODE_TYPES[selectedNode.data.nodeType as keyof typeof NODE_TYPES];\n  const colorMap: Record<string, { bg: string; accent: string }> = {\n    inputs: { bg: 'bg-blue-50', accent: 'bg-blue-500' },\n    ai: { bg: 'bg-amber-50', accent: 'bg-amber-500' },\n    processing: { bg: 'bg-emerald-50', accent: 'bg-emerald-500' },\n    outputs: { bg: 'bg-red-50', accent: 'bg-red-500' },\n  };\n  const colors = colorMap[selectedNode.data.category] || { bg: 'bg-gray-50', accent: 'bg-gray-500' };\n\n  return (\n    <>\n      <div className=\"p-4 border-b border-gray-200\">\n        <h3 className=\"text-sm font-semibold text-gray-900\">Node Properties</h3>\n      </div>\n      \n      <div className=\"flex-1 overflow-y-auto p-4\">\n        <div className=\"space-y-4\">\n          {/* Node Header */}\n          <div className={`flex items-center space-x-3 p-3 ${colors.bg} rounded-lg`}>\n            <div className={`w-4 h-4 ${colors.accent} rounded-full`} />\n            <div>\n              <h4 className=\"text-sm font-semibold text-gray-900\" data-testid=\"selected-node-name\">\n                {selectedNode.data.label}\n              </h4>\n              <p className=\"text-xs text-gray-600\" data-testid=\"selected-node-id\">\n                {selectedNode.id}\n              </p>\n            </div>\n          </div>\n\n          {/* Basic Properties */}\n          <div>\n            <Label className=\"text-xs font-semibold text-gray-700 uppercase tracking-wide\">\n              Basic Settings\n            </Label>\n            <div className=\"mt-2 space-y-3\">\n              <div>\n                <Label htmlFor=\"node-label\" className=\"text-sm font-medium text-gray-700\">\n                  Label\n                </Label>\n                <Input\n                  id=\"node-label\"\n                  value={selectedNode.data.label || ''}\n                  onChange={(e) => updateNodeData('label', e.target.value)}\n                  className=\"mt-1\"\n                  data-testid=\"node-label-input\"\n                />\n              </div>\n              \n              <div>\n                <Label htmlFor=\"node-description\" className=\"text-sm font-medium text-gray-700\">\n                  Description\n                </Label>\n                <Textarea\n                  id=\"node-description\"\n                  rows={2}\n                  value={selectedNode.data.description || ''}\n                  onChange={(e) => updateNodeData('description', e.target.value)}\n                  className=\"mt-1\"\n                  data-testid=\"node-description-input\"\n                />\n              </div>\n            </div>\n          </div>\n\n          {/* Node-specific Configuration */}\n          {selectedNode.data.nodeType === 'openai' && (\n            <div>\n              <Label className=\"text-xs font-semibold text-gray-700 uppercase tracking-wide\">\n                OpenAI Configuration\n              </Label>\n              <div className=\"mt-2 space-y-3\">\n                <div>\n                  <Label htmlFor=\"model\" className=\"text-sm font-medium text-gray-700\">\n                    Model\n                  </Label>\n                  <Select \n                    value={selectedNode.data.model || 'gpt-4o'} \n                    onValueChange={(value) => updateNodeData('model', value)}\n                  >\n                    <SelectTrigger className=\"mt-1\" data-testid=\"model-select\">\n                      <SelectValue placeholder=\"Select model\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"gpt-4o\">GPT-4o</SelectItem>\n                      <SelectItem value=\"gpt-4\">GPT-4</SelectItem>\n                      <SelectItem value=\"gpt-3.5-turbo\">GPT-3.5 Turbo</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n                \n                <div>\n                  <Label htmlFor=\"temperature\" className=\"text-sm font-medium text-gray-700\">\n                    Temperature: {selectedNode.data.temperature || 0.7}\n                  </Label>\n                  <Slider\n                    value={[selectedNode.data.temperature || 0.7]}\n                    onValueChange={([value]) => updateNodeData('temperature', value)}\n                    max={1}\n                    min={0}\n                    step={0.1}\n                    className=\"mt-2\"\n                    data-testid=\"temperature-slider\"\n                  />\n                  <div className=\"flex justify-between text-xs text-gray-500 mt-1\">\n                    <span>0 (Deterministic)</span>\n                    <span>1 (Creative)</span>\n                  </div>\n                </div>\n\n                <div>\n                  <Label htmlFor=\"max-tokens\" className=\"text-sm font-medium text-gray-700\">\n                    Max Tokens\n                  </Label>\n                  <Input\n                    id=\"max-tokens\"\n                    type=\"number\"\n                    value={selectedNode.data.maxTokens || 150}\n                    onChange={(e) => updateNodeData('maxTokens', parseInt(e.target.value))}\n                    className=\"mt-1\"\n                    data-testid=\"max-tokens-input\"\n                  />\n                </div>\n\n                <div>\n                  <Label htmlFor=\"system-prompt\" className=\"text-sm font-medium text-gray-700\">\n                    System Prompt\n                  </Label>\n                  <Textarea\n                    id=\"system-prompt\"\n                    rows={4}\n                    value={selectedNode.data.systemPrompt || ''}\n                    onChange={(e) => updateNodeData('systemPrompt', e.target.value)}\n                    placeholder=\"You are a helpful assistant...\"\n                    className=\"mt-1\"\n                    data-testid=\"system-prompt-input\"\n                  />\n                </div>\n\n                <div>\n                  <Label htmlFor=\"user-message\" className=\"text-sm font-medium text-gray-700\">\n                    User Message Template\n                  </Label>\n                  <Textarea\n                    id=\"user-message\"\n                    rows={3}\n                    value={selectedNode.data.userMessage || ''}\n                    onChange={(e) => updateNodeData('userMessage', e.target.value)}\n                    placeholder=\"{{input}} or custom message...\"\n                    className=\"mt-1\"\n                    data-testid=\"user-message-input\"\n                  />\n                </div>\n              </div>\n            </div>\n          )}\n\n          {selectedNode.data.nodeType === 'agent' && (\n            <div>\n              <Label className=\"text-xs font-semibold text-gray-700 uppercase tracking-wide\">\n                AI Agent Configuration\n              </Label>\n              <div className=\"mt-2 space-y-3\">\n                <div>\n                  <Label htmlFor=\"provider\" className=\"text-sm font-medium text-gray-700\">\n                    LLM Provider\n                  </Label>\n                  <Select \n                    value={selectedNode.data.provider || 'openai'} \n                    onValueChange={(value) => {\n                      updateNodeData('provider', value);\n                      // Reset model when provider changes\n                      const models = getProviderModels(value);\n                      if (models.length > 0) {\n                        updateNodeData('model', models[0]);\n                      }\n                    }}\n                  >\n                    <SelectTrigger className=\"mt-1\" data-testid=\"provider-select\">\n                      <SelectValue placeholder=\"Select provider\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {Object.entries(LLM_PROVIDERS).map(([id, provider]) => (\n                        <SelectItem key={id} value={id}>\n                          {provider.name}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n                \n                <div>\n                  <Label htmlFor=\"model\" className=\"text-sm font-medium text-gray-700\">\n                    Model\n                  </Label>\n                  <Select \n                    value={selectedNode.data.model || 'gpt-4o'} \n                    onValueChange={(value) => updateNodeData('model', value)}\n                  >\n                    <SelectTrigger className=\"mt-1\" data-testid=\"agent-model-select\">\n                      <SelectValue placeholder=\"Select model\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {getProviderModels(selectedNode.data.provider || 'openai').map((model) => (\n                        <SelectItem key={model} value={model}>\n                          {model}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n                \n                <div>\n                  <Label htmlFor=\"temperature\" className=\"text-sm font-medium text-gray-700\">\n                    Temperature: {selectedNode.data.temperature || 0.7}\n                  </Label>\n                  <Slider\n                    value={[selectedNode.data.temperature || 0.7]}\n                    onValueChange={([value]) => updateNodeData('temperature', value)}\n                    max={1}\n                    min={0}\n                    step={0.1}\n                    className=\"mt-2\"\n                    data-testid=\"agent-temperature-slider\"\n                  />\n                  <div className=\"flex justify-between text-xs text-gray-500 mt-1\">\n                    <span>0 (Deterministic)</span>\n                    <span>1 (Creative)</span>\n                  </div>\n                </div>\n\n                <div>\n                  <Label htmlFor=\"max-tokens\" className=\"text-sm font-medium text-gray-700\">\n                    Max Tokens\n                  </Label>\n                  <Input\n                    id=\"max-tokens\"\n                    type=\"number\"\n                    value={selectedNode.data.maxTokens || 500}\n                    onChange={(e) => updateNodeData('maxTokens', parseInt(e.target.value))}\n                    className=\"mt-1\"\n                    data-testid=\"agent-max-tokens-input\"\n                  />\n                </div>\n\n                <div>\n                  <Label htmlFor=\"prompt\" className=\"text-sm font-medium text-gray-700\">\n                    Agent Prompt\n                  </Label>\n                  <Textarea\n                    id=\"prompt\"\n                    rows={4}\n                    value={selectedNode.data.prompt || ''}\n                    onChange={(e) => updateNodeData('prompt', e.target.value)}\n                    placeholder=\"You are an AI agent with access to tools...\"\n                    className=\"mt-1\"\n                    data-testid=\"agent-prompt-input\"\n                  />\n                </div>\n\n                <div>\n                  <Label className=\"text-sm font-medium text-gray-700\">\n                    Features\n                  </Label>\n                  <div className=\"mt-2 space-y-2\">\n                    <div className=\"flex items-center space-x-2\">\n                      <Switch\n                        id=\"memory\"\n                        checked={selectedNode.data.memory || false}\n                        onCheckedChange={(checked) => updateNodeData('memory', checked)}\n                        data-testid=\"memory-switch\"\n                      />\n                      <Label htmlFor=\"memory\" className=\"text-sm\">\n                        Memory (Context retention)\n                      </Label>\n                    </div>\n                  </div>\n                </div>\n\n                <div>\n                  <Label className=\"text-sm font-medium text-gray-700\">\n                    Provider Status\n                  </Label>\n                  <div className=\"mt-2 p-3 bg-muted rounded-md\">\n                    <p className=\"text-sm\">\n                      <Badge variant={selectedNode.data.provider === 'openai' ? 'default' : 'secondary'}>\n                        {getProviderName(selectedNode.data.provider || 'openai')}\n                      </Badge>\n                    </p>\n                    {selectedNode.data.provider !== 'openai' && (\n                      <p className=\"text-xs text-muted-foreground mt-1\">\n                        Note: This provider needs API key configuration\n                      </p>\n                    )}\n                  </div>\n                </div>\n              </div>\n            </div>\n          )}\n\n          {selectedNode.data.nodeType === 'condition' && (\n            <div>\n              <Label className=\"text-xs font-semibold text-gray-700 uppercase tracking-wide\">\n                Condition Settings\n              </Label>\n              <div className=\"mt-2 space-y-3\">\n                <div>\n                  <Label htmlFor=\"condition\" className=\"text-sm font-medium text-gray-700\">\n                    Condition Expression\n                  </Label>\n                  <Input\n                    id=\"condition\"\n                    value={selectedNode.data.condition || ''}\n                    onChange={(e) => updateNodeData('condition', e.target.value)}\n                    placeholder=\"e.g., sentiment > 0.7\"\n                    className=\"mt-1 font-mono\"\n                    data-testid=\"condition-input\"\n                  />\n                </div>\n              </div>\n            </div>\n          )}\n\n          {selectedNode.data.nodeType === 'email' && (\n            <div>\n              <Label className=\"text-xs font-semibold text-gray-700 uppercase tracking-wide\">\n                Email Settings\n              </Label>\n              <div className=\"mt-2 space-y-3\">\n                <div>\n                  <Label htmlFor=\"email-to\" className=\"text-sm font-medium text-gray-700\">\n                    To\n                  </Label>\n                  <Input\n                    id=\"email-to\"\n                    value={selectedNode.data.to || ''}\n                    onChange={(e) => updateNodeData('to', e.target.value)}\n                    placeholder=\"recipient@example.com\"\n                    className=\"mt-1\"\n                    data-testid=\"email-to-input\"\n                  />\n                </div>\n                \n                <div>\n                  <Label htmlFor=\"email-subject\" className=\"text-sm font-medium text-gray-700\">\n                    Subject\n                  </Label>\n                  <Input\n                    id=\"email-subject\"\n                    value={selectedNode.data.subject || ''}\n                    onChange={(e) => updateNodeData('subject', e.target.value)}\n                    placeholder=\"Email subject...\"\n                    className=\"mt-1\"\n                    data-testid=\"email-subject-input\"\n                  />\n                </div>\n\n                <div>\n                  <Label htmlFor=\"email-body\" className=\"text-sm font-medium text-gray-700\">\n                    Body\n                  </Label>\n                  <Textarea\n                    id=\"email-body\"\n                    rows={4}\n                    value={selectedNode.data.body || ''}\n                    onChange={(e) => updateNodeData('body', e.target.value)}\n                    placeholder=\"Email body...\"\n                    className=\"mt-1\"\n                    data-testid=\"email-body-input\"\n                  />\n                </div>\n              </div>\n            </div>\n          )}\n\n          {selectedNode.data.nodeType === 'code' && (\n            <div>\n              <Label className=\"text-xs font-semibold text-gray-700 uppercase tracking-wide\">\n                Code Settings\n              </Label>\n              <div className=\"mt-2 space-y-3\">\n                <div>\n                  <Label htmlFor=\"language\" className=\"text-sm font-medium text-gray-700\">\n                    Language\n                  </Label>\n                  <Select \n                    value={selectedNode.data.language || 'javascript'} \n                    onValueChange={(value) => updateNodeData('language', value)}\n                  >\n                    <SelectTrigger className=\"mt-1\" data-testid=\"language-select\">\n                      <SelectValue placeholder=\"Select language\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"javascript\">JavaScript</SelectItem>\n                      <SelectItem value=\"python\">Python</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n                \n                <div>\n                  <Label htmlFor=\"code\" className=\"text-sm font-medium text-gray-700\">\n                    Code\n                  </Label>\n                  <Textarea\n                    id=\"code\"\n                    rows={8}\n                    value={selectedNode.data.code || ''}\n                    onChange={(e) => updateNodeData('code', e.target.value)}\n                    placeholder=\"// Your code here...\"\n                    className=\"mt-1 font-mono\"\n                    data-testid=\"code-input\"\n                  />\n                </div>\n              </div>\n            </div>\n          )}\n\n          <Separator />\n\n          {/* Actions */}\n          <div className=\"space-y-2\">\n            <Button \n              variant=\"outline\" \n              className=\"w-full\" \n              data-testid=\"test-node-button\"\n            >\n              Test Node\n            </Button>\n            \n            <Button \n              variant=\"destructive\" \n              className=\"w-full\"\n              onClick={() => onNodeDelete(selectedNode.id)}\n              data-testid=\"delete-node-button\"\n            >\n              Delete Node\n            </Button>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n}\n","size_bytes":21828},"client/src/lib/llm-providers.ts":{"content":"export interface LLMProvider {\n  id: string;\n  name: string;\n  models: string[];\n  supportsSystemPrompt: boolean;\n}\n\n// Available LLM providers - matches server-side configuration\nexport const LLM_PROVIDERS: Record<string, LLMProvider> = {\n  openai: {\n    id: 'openai',\n    name: 'OpenAI',\n    models: ['gpt-4o', 'gpt-4o-mini', 'gpt-4-turbo', 'gpt-3.5-turbo'],\n    supportsSystemPrompt: true,\n  },\n  anthropic: {\n    id: 'anthropic',\n    name: 'Anthropic Claude',\n    models: ['claude-3-5-sonnet-20241022', 'claude-3-opus-20240229', 'claude-3-haiku-20240307'],\n    supportsSystemPrompt: true,\n  },\n  google: {\n    id: 'google',\n    name: 'Google Gemini',\n    models: ['gemini-1.5-pro', 'gemini-1.5-flash', 'gemini-pro'],\n    supportsSystemPrompt: true,\n  },\n  cohere: {\n    id: 'cohere',\n    name: 'Cohere',\n    models: ['command-r-plus', 'command-r', 'command'],\n    supportsSystemPrompt: false,\n  },\n  mistral: {\n    id: 'mistral',\n    name: 'Mistral AI',\n    models: ['mistral-large-latest', 'mistral-medium-latest', 'mistral-small-latest'],\n    supportsSystemPrompt: true,\n  }\n};\n\nexport function getProviderModels(providerId: string): string[] {\n  return LLM_PROVIDERS[providerId]?.models || [];\n}\n\nexport function getProviderName(providerId: string): string {\n  return LLM_PROVIDERS[providerId]?.name || providerId;\n}\n\nexport function supportsSystemPrompt(providerId: string): boolean {\n  return LLM_PROVIDERS[providerId]?.supportsSystemPrompt || false;\n}","size_bytes":1461},"server/services/llm-service.ts":{"content":"import OpenAI from 'openai';\n\n// Initialize OpenAI client\nconst openai = new OpenAI({ apiKey: process.env.OPENAI_API_KEY });\n\nexport interface LLMProvider {\n  id: string;\n  name: string;\n  models: string[];\n  supportsSystemPrompt: boolean;\n}\n\nexport interface ChatMessage {\n  role: 'system' | 'user' | 'assistant';\n  content: string;\n}\n\nexport interface ChatCompletionOptions {\n  provider: string;\n  model: string;\n  messages: ChatMessage[];\n  systemPrompt?: string;\n  temperature?: number;\n  maxTokens?: number;\n}\n\n// Available LLM providers\nexport const LLM_PROVIDERS: Record<string, LLMProvider> = {\n  openai: {\n    id: 'openai',\n    name: 'OpenAI',\n    models: ['gpt-4o', 'gpt-4o-mini', 'gpt-4-turbo', 'gpt-3.5-turbo'],\n    supportsSystemPrompt: true,\n  },\n  anthropic: {\n    id: 'anthropic',\n    name: 'Anthropic Claude',\n    models: ['claude-3-5-sonnet-20241022', 'claude-3-opus-20240229', 'claude-3-haiku-20240307'],\n    supportsSystemPrompt: true,\n  },\n  google: {\n    id: 'google',\n    name: 'Google Gemini',\n    models: ['gemini-1.5-pro', 'gemini-1.5-flash', 'gemini-pro'],\n    supportsSystemPrompt: true,\n  },\n  cohere: {\n    id: 'cohere',\n    name: 'Cohere',\n    models: ['command-r-plus', 'command-r', 'command'],\n    supportsSystemPrompt: false,\n  },\n  mistral: {\n    id: 'mistral',\n    name: 'Mistral AI',\n    models: ['mistral-large-latest', 'mistral-medium-latest', 'mistral-small-latest'],\n    supportsSystemPrompt: true,\n  }\n};\n\nexport class LLMService {\n  async chat(options: ChatCompletionOptions): Promise<string> {\n    const provider = LLM_PROVIDERS[options.provider];\n    if (!provider) {\n      throw new Error(`Unsupported provider: ${options.provider}`);\n    }\n\n    switch (options.provider) {\n      case 'openai':\n        return this.chatOpenAI(options);\n      case 'anthropic':\n        return this.chatAnthropic(options);\n      case 'google':\n        return this.chatGoogle(options);\n      case 'cohere':\n        return this.chatCohere(options);\n      case 'mistral':\n        return this.chatMistral(options);\n      default:\n        throw new Error(`Provider ${options.provider} not implemented yet`);\n    }\n  }\n\n  private async chatOpenAI(options: ChatCompletionOptions): Promise<string> {\n    try {\n      const messages: ChatMessage[] = [];\n      \n      if (options.systemPrompt) {\n        messages.push({\n          role: 'system',\n          content: options.systemPrompt\n        });\n      }\n      \n      messages.push(...options.messages);\n\n      const response = await openai.chat.completions.create({\n        model: options.model || \"gpt-4o\", // the newest OpenAI model is \"gpt-4o\" which was released May 13, 2024. do not change this unless explicitly requested by the user\n        messages,\n        temperature: options.temperature || 0.7,\n        max_tokens: options.maxTokens || 500,\n      });\n\n      return response.choices[0].message.content || \"\";\n    } catch (error) {\n      console.error(\"OpenAI API error:\", error);\n      throw new Error(\"Failed to process OpenAI chat completion\");\n    }\n  }\n\n  private async chatAnthropic(options: ChatCompletionOptions): Promise<string> {\n    // Note: This would require the Anthropic SDK and API key\n    // For now, return a placeholder response\n    console.warn(\"Anthropic provider not fully implemented yet\");\n    return `[Anthropic ${options.model}] This provider needs to be configured with API key and SDK.`;\n  }\n\n  private async chatGoogle(options: ChatCompletionOptions): Promise<string> {\n    // Note: This would require the Google AI SDK and API key\n    console.warn(\"Google provider not fully implemented yet\");\n    return `[Google ${options.model}] This provider needs to be configured with API key and SDK.`;\n  }\n\n  private async chatCohere(options: ChatCompletionOptions): Promise<string> {\n    // Note: This would require the Cohere SDK and API key\n    console.warn(\"Cohere provider not fully implemented yet\");\n    return `[Cohere ${options.model}] This provider needs to be configured with API key and SDK.`;\n  }\n\n  private async chatMistral(options: ChatCompletionOptions): Promise<string> {\n    // Note: This would require the Mistral SDK and API key\n    console.warn(\"Mistral provider not fully implemented yet\");\n    return `[Mistral ${options.model}] This provider needs to be configured with API key and SDK.`;\n  }\n\n  async generateResponse(provider: string, model: string, prompt: string, context?: any): Promise<string> {\n    const systemPrompt = `You are a helpful AI assistant. ${context ? `Context: ${JSON.stringify(context)}` : ''}`;\n    \n    return this.chat({\n      provider,\n      model,\n      messages: [{ role: 'user', content: prompt }],\n      systemPrompt,\n      temperature: 0.7,\n      maxTokens: 500,\n    });\n  }\n\n  // Keep backward compatibility with existing OpenAI methods\n  async analyzeSentiment(text: string): Promise<{ sentiment: string; score: number; confidence: number }> {\n    try {\n      const response = await openai.chat.completions.create({\n        model: \"gpt-4o\", // the newest OpenAI model is \"gpt-4o\" which was released May 13, 2024. do not change this unless explicitly requested by the user\n        messages: [\n          {\n            role: \"system\",\n            content: \"You are a sentiment analysis expert. Analyze the sentiment of the text and provide sentiment (positive/negative/neutral), score (-1 to 1), and confidence (0 to 1). Respond with JSON in this format: { 'sentiment': string, 'score': number, 'confidence': number }\"\n          },\n          {\n            role: \"user\",\n            content: text\n          }\n        ],\n        response_format: { type: \"json_object\" },\n      });\n\n      const result = JSON.parse(response.choices[0].message.content || \"{}\");\n      \n      return {\n        sentiment: result.sentiment || \"neutral\",\n        score: Math.max(-1, Math.min(1, result.score || 0)),\n        confidence: Math.max(0, Math.min(1, result.confidence || 0))\n      };\n    } catch (error) {\n      console.error(\"Sentiment analysis error:\", error);\n      throw new Error(\"Failed to analyze sentiment\");\n    }\n  }\n}\n\nexport const llmService = new LLMService();","size_bytes":6111}},"version":1}